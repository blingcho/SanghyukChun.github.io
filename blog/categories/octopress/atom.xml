<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | README]]></title>
  <link href="http://SanghyukChun.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://SanghyukChun.github.io/"/>
  <updated>2014-04-06T05:28:38+09:00</updated>
  <id>http://SanghyukChun.github.io/</id>
  <author>
    <name><![CDATA[Sanghyuk Chun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[블로그에서 Latex 수식 사용하기(MathJax)]]></title>
    <link href="http://SanghyukChun.github.io/25/"/>
    <updated>2013-11-05T19:26:00+09:00</updated>
    <id>http://SanghyukChun.github.io/25</id>
    <content type="html"><![CDATA[<p>수식을 일반 텍스트로 표현하는 것은 상당히 가독성도 떨어지고 적는 사람도 매우 불편하다. 요즘 포스팅에서 수식을 적을 일이 많아져서 이 참에 블로그에 Latex 문법을 사용할 수 있으면 좋겠다는 생각이 들어서 이번 기회에 추가해봤다. 여러가지 방법이 있을 수 있지만, 내가 선택한 솔루션은 <a href="http://www.mathjax.org/" target="new"></a>MathJax라는 javascript plugin.. 이걸 사용한 이유는 가장 많이 쓰이는 것 같고, 자료도 많고 여러 브라우저나 OS랑 호환성도 좋은 것 같아 사용하기로 했다. 무엇보다 직접 javascript를 더 추가하지 않아도 된다는 사실도 좋았다. 속도가 엄청 중요한 웹페이지가 아니고서야 plugin을 다운로드 받고 하는 것 보다 특정 cdn에서 온라인으로 다운로드 받게 하는게 개발하는 입장에서는 훨씬 편하다.</p>


<p>방법은 매우 간단하다. 아래와 같은 코드를 head에 넣으면 끝. </p>


<p>```</p>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>


<p>```</p>

<p>이제 준비는 끝났다. 이제 수식을 넣어보자.</p>


<p>사용법은 어렵지 않다. 만약 \( E=mc^2 \)를 쓰고 싶으면 </p>


<p><code>
\( E=mc^2 \)
</code></p>

<p>라고 적으면 된다. 위에 E=mc^2를 적은 곳에 다른 Latex 문법을 넣으면 다른 수식을 표현할 수 있다.</p>


<p>이번 포스팅의 참고 포스트: <a href="http://blog.daum.net/whitebrow09/292" target="new">블로그에서 수식 표현하기</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.07.27]]></title>
    <link href="http://SanghyukChun.github.io/8/"/>
    <updated>2013-07-28T02:36:00+09:00</updated>
    <id>http://SanghyukChun.github.io/8</id>
    <content type="html"><![CDATA[<p>저번 주에는 <a href="http://sanghyukchun.github.io/aboutMe/">AboutMe</a>에 매진하고 이번 주말에는 내내 블로그를 작업하는 데에 몰두한 것 같다. -프로그래밍은 재미있는 것이다.- 라는 말은 어디까지나 내가 감당할 수 있고 내가 어떻게 할 수 있을지 가늠할 수 있을 때 어울리는 말이 아닐까. 앞으로 내가 나아갈 방향에서 그렇지 않은 프로그래밍이 참 많을텐데 내가 계속 프로그래밍을 하는 것이 맞을까라는 생각이 든다.</p>


<p>Octopress로 블로그를 만든 것을 살짝 후회하고 있다. 편하게 고치려고 가져온건데 오히려 바닥부터 뜯어고쳐야하는게 많다보니 차라리 처음부터 지킬로 작업하는 것 보다 느린 것 같다. 하지만 일단 커스터마이징만 끝나면 deploy, preview 심지어 new post까지 전부 스크립트로 걸어놨으니 오히려 더 빠르게 진행될 수 있겠지</p>


<p>머신러닝 공부 속도는 더디지만 (오늘은 7강까지 밖에 못들었다.) 그래도 얼른 끝내야 내 프로젝트를 진행하고 neural network 강의 등으로 넘어가서 내 자신에 대한 발전이 있을 텐데 자꾸 더디다. 아직까지는 전부 아는 내용이라 사실 정말 빠르게 다 보고 슥슥 넘겨도 괜찮은 정도인데 그 잠깐을 집중하는 것도 못하고 있어서 큰일이다. 하지만 머신러닝 강의가 더딘만큼 블로그와 About Me의 개발 속도는 어마어마한 것을 보면 확실히 이 세상에 모든 것은 trade-off관계인가 보다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress에 facebook comments 추가하기]]></title>
    <link href="http://SanghyukChun.github.io/7/"/>
    <updated>2013-07-28T01:38:00+09:00</updated>
    <id>http://SanghyukChun.github.io/7</id>
    <content type="html"><![CDATA[<p>원래는 바로 레이아웃 뜯어고친 얘기를 적을 생각이었지만 페북 코멘트로 삽질을 하고나니 이것 부터 기록하는 편이 더 나을 것 같다.. 일단 당연히 Octopress는 정적 html 페이지이니 Octopress자체가 comment를 관리하는 것은 불가능하다. 때문에 iframe으로 만들어진 social plugin이 필요한 것이고.. 사실 Disqus를 사용하면 세팅도 할 필요없이 간단하게 처리가 가능하다. 하지만 Disqus는 여러 단점이 존재하고, 무엇보다 내가 쓸 줄 모른다 -_-; 그리고 한국에서 쓰는 걸 본 적이 없음. 차라리 페북이나 트위터 댓글을 만드는 편이 훨씬 나을 것 같아서 개발 경험이 있는 페이스북 댓글로 가기로 했다.</p>


<p>페이스북 댓글을 만들기 위해서는 먼저 app id가 필요하다. 자신의 <a href="https://developers.facebook.com/apps">App관리 페이지</a>에서 앱을 추가하고 app id만 받아오면 된다. 이 id가 있어야 페이스북 자바스크립트 API를 사용 가능하기 때문에 꼭 만들어줘야한다. (즉, 앱 이름을 제외한 나머지 옵션은 건드릴 필요가 없다)</p>


<p>원래 <a href="https://developers.facebook.com/docs/reference/plugins/comments/">facebook document</a>에서 <a class="tip" title="facebook comment에서 설정할 수 있는 값은 크기와 light, dark뿐">자동 생성한 코드</a>를 이용했기 때문에 id를 전부 하드코딩했었는데 <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">좋은 포스트</a>를 발견해서 새로운 좋은 방법을 알아냈다. 일단 받아온 앱 id를 _config.yml에 추가하자.</p>


<p><code>
facebook_app_id = 12341234
</code></p>

<p><a href="https://developers.facebook.com/docs/reference/plugins/comments/">위에서 링크한 document</a>를 보면 알 수 있겠지만, body에서 script를 사용하여 API를 사용할 수 있도록 만들어주는 코드가 필요하고, 실제 코멘트를 추가할 위치에 fb_comments라는 div를 생성해야한다. 이게 사실 짱짱 귀찮은데 이유는 Comment를 추가해야하는 곳이 page랑 post 두개이기 때문 -_-; 거기다가 나는 이상하게 조건문이 잘 안먹어서 열이 뻗쳐서 그냥 if문도 날려버렸다. 내 코딩의 문제겠지만 오랫만에 레일즈 스타일로 html고치려니깐 뭔가 답답해서..</p>


<p>아무튼 그렇게 하고나서 <code>source/_include/post/facebook_comment.html</code>이라는 녀석을 만들어서 아래의 코드를 추가해주자</p>


<p>```</p>

<div class="fb-comments" data-href="http://SanghyukChun.github.ioblog/categories/octopress/atom.xml" data-width="470" data-num-posts="10"></div>


<p>```</p>

<p>옵션은 본인이 원하는 대로 고쳐도 된다. 이제 <code>source/_layout/page.html</code>과 <code>source/_layout/post.html</code>을 수정하자</p>


<p>```
&#123;&#37; if site.facebook_app_id &#37;&#125;
  <section></p>

<pre><code>&lt;h1&gt;Comments&lt;/h1&gt;
&lt;div id="facebook_comments" aria-live="polite"&gt;
  &amp;#123&amp;#37 include post/facebook_comment.html &amp;#37;&amp;#125;
&lt;/div&gt;
</code></pre>

<p>  </section>
&#123;&#37; endif &#37;&#125;
```</p>

<p>자 이걸로 끝이다. <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">아까 링크했던 글</a>에서는 head에 meta를 추가해주는데 해도 좋고, 없어도 잘 돌아는간다.</p>


<p></p>

<h6>생길 수 있는 문제들</h6>


<ul>
    <li>나처럼 옵션 잘못 걸어서 아예 Comment section자체가 안생김</li>
    <li>data-href에 http:// 없는 상태로 테스트함 (위와 같이해서 preview 때리면 잘 되야한다)</li>
    <li>app id나 등등에서 오타가 있음 (그런데 은근 고칠게 많아서 의외로 찾기 힘들다)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 자잘한 세팅 변경 및 post용 script 만들기]]></title>
    <link href="http://SanghyukChun.github.io/6/"/>
    <updated>2013-07-27T20:13:00+09:00</updated>
    <id>http://SanghyukChun.github.io/6</id>
    <content type="html"><![CDATA[<p>일단 자잘한 세팅으로 첫 번째 favicon. favicon이라는 녀석은 사이트에 즐겨찾기를 추가했을 때 옆에 작게 로고처럼 표시되는 녀석인데, default값이 octopress랑 같아서 도저히 작업하면서 신경쓰여서 바꿔버렸다. 이건 정말 간단하다. source/ directory바로 밑에 있는 favicon.png만 다른 파일로 바꿔주고 generate하고 deploy하면 끝</p>


<p>두번 째로 Permalink. 쉽게 생각하면 포스트의 고유 주소값. 내가 티스토리, 워드프레스로 넘어가면서 가장 불만이었던 점이 이 고유 주소값의 default가 포스트 이름이라는 점. 근데 나는 원래 포스트 이름이 꽤 긴편이고 거기다가 주소에 날짜가 들어가면 정말 우아하지 않다고 생각해서 가장 미니멀리즘하게 포스트 순서대로 하는 것을 좋아한다. 그런데 octopress도 기본 값이 년/월/일/제목 이다.. -_- 그래서 간단하게 바꿔줬는데, _config.yml에 있는 permalink를 /:year/:month/:day/:title에서 /:title로 바꿔주고 markdown 파일 이름을 2013-07-25-1.markdown 이런 식으로 바꿔주면 된다. 어차피 앞에 주소는 rake new_post할 때 해주는거니깐 딱히 고민할 이유는 없다.</p>


<p></p>

<p>근데 이렇게 하면 매번 생성할 때 마다 마지막 파일 이름이 뭐였는지 일일이 확인해야해서 굉장히 상당히 엄청 귀찮다. 그래서 아래와 같은 스크립트를 만들었음</p>


<p> <br/>
```</p>

<h1>!/bin/bash</h1>

<p>num=$(ls -l | grep markdown | wc -l)
bundle exec rake new_post[&ldquo;$((num+1))&rdquo;]
```</p>

<p>그냥 post.sh라고 이름 붙이고 /source/_post directory바로 밑에 두고 ./post.sh만 돌리면 알아서 순서대로 만들어 준다 굳굳</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress - CSS 변경하기]]></title>
    <link href="http://SanghyukChun.github.io/4/"/>
    <updated>2013-07-27T16:17:00+09:00</updated>
    <id>http://SanghyukChun.github.io/4</id>
    <content type="html"><![CDATA[<p>평일에는 조금 바빴고 주말을 맞아 블로그를 다시 Customize하고자 간단하게 Document를 훑어보고 당장 Twitter Bootstrap을 적용시켰다. 한가지 당황했던 점은 Bootstrap이 2에서 3으로 version up 되면서 docs페이지가 완전히 정전 상태.. 그냥 급하게 Bootstrap team blog에서 다운받아서 소스만 붙여 넣었다. 나중에 version 3으로 업그레이드 되면 바꿔줘야 할 것 같은 부분이다. (근데 About Me 실컷 Bootstrap CSS Customizing하고 필요없는거 다 지우고 comon.css로 몰아놓고 1주일도 안되서 ver.3이라니.. deploy완전히 끝나면 훑어보고 마음에 들면 About Me를 통채로 들어내야 할수도;;)</p>


<p>아무튼, css를 바꾸는 방법은 간단했다. 공식 <a href="http://octopress.org/docs/theme/styles/">document</a>를 보면 <code>sass/custom/_style.scss</code>를 수정하면 된다고 한다. 간단하게 override하라는 의미인데, Bootstrap을 그냥 들어다가 붙이기만 해도 꽤 나름 훌륭한 스타일링이 된다. 내가 Bootstrap을 사랑하는 이유. 다만 폰트가 마음에 들지 않아서 (이상하게 대부분의 사이트가 그러하듯 sarif를 기본 폰트로 지정하면 윈도우 크롬 환경에서 폰트가 깨지는 경우가 종종있다.) 구글 웹폰트에서 나눔고딕코딩으로 적용시커주었다. 굳이 나눔고딕코딩으로 적용한 이유는 아무래도 이 블로그에는 코딩이 많이 들어갈 것 같고 간단하게 문서를 읽기에는 역시 나눔고딕코딩이 괜찮을 것 같아서이다. 방법은 간단하다 <code>sass/custom/_style.scss</code>에 아래처럼만 넣어주면 된다</p>


<p><code>
@import url(http://fonts.googleapis.com/earlyaccess/nanumgothiccoding.css);
body {
  font-family: "Nanum Gothic Coding";
}
</code></p>

<p>물론 나는 Bootstrap에 넣은 것이기 때문에 Bootstrap에서 body에 해당하는 부분만 바꾸어 주었다. 추가로 pre, code에 해당하는 부분 등에도 font-family가 설정되어 있어 그 부분도 마찬가지로 수정. 이렇게 처리하면 어렵지 않게 CSS style을 변경할 수 있다. 이제 layout을 뜯어고칠 차례!</p>

]]></content>
  </entry>
  
</feed>
