<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | SanghyukChun's Blog]]></title>
  <link href="http://SanghyukChun.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://SanghyukChun.github.io/"/>
  <updated>2013-07-28T01:34:53+09:00</updated>
  <id>http://SanghyukChun.github.io/</id>
  <author>
    <name><![CDATA[Sanghyuk Chun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress 자잘한 세팅 변경 및 post용 script 만들기]]></title>
    <link href="http://SanghyukChun.github.io/blog/6/"/>
    <updated>2013-07-27T20:13:00+09:00</updated>
    <id>http://SanghyukChun.github.io/blog/6</id>
    <content type="html"><![CDATA[<p>일단 자잘한 세팅으로 첫 번째 favicon. favicon이라는 녀석은 사이트에 즐겨찾기를 추가했을 때 옆에 작게 로고처럼 표시되는 녀석인데, default값이 octopress랑 같아서 도저히 작업하면서 신경쓰여서 바꿔버렸다. 이건 정말 간단하다. source/ directory바로 밑에 있는 favicon.png만 다른 파일로 바꿔주고 generate하고 deploy하면 끝</p>


<p>두번 째로 Permalink. 쉽게 생각하면 포스트의 고유 주소값. 내가 티스토리, 워드프레스로 넘어가면서 가장 불만이었던 점이 이 고유 주소값의 default가 포스트 이름이라는 점. 근데 나는 원래 포스트 이름이 꽤 긴편이고 거기다가 주소에 날짜가 들어가면 정말 우아하지 않다고 생각해서 가장 미니멀리즘하게 포스트 순서대로 하는 것을 좋아한다. 그런데 octopress도 기본 값이 년/월/일/제목 이다.. -_- 그래서 간단하게 바꿔줬는데, _config.yml에 있는 permalink를 /:year/:month/:day/:title에서 /:title로 바꿔주고 markdown 파일 이름을 2013-07-25-1.markdown 이런 식으로 바꿔주면 된다. 어차피 앞에 주소는 rake new_post할 때 해주는거니깐 딱히 고민할 이유는 없다.</p>


<p></p>

<p>근데 이렇게 하면 매번 생성할 때 마다 마지막 파일 이름이 뭐였는지 일일이 확인해야해서 굉장히 상당히 엄청 귀찮다. 그래서 아래와 같은 스크립트를 만들었음</p>


<p> <br/>
```</p>

<h1>!/bin/bash</h1>

<p>num=$(ls -l | grep markdown | wc -l)
bundle exec rake new_post[&ldquo;$((num+1))&rdquo;]
```</p>

<p>그냥 post.sh라고 이름 붙이고 /source/_post directory바로 밑에 두고 ./post.sh만 돌리면 알아서 순서대로 만들어 준다 굳굳</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script와 함께하는 Bundle exec~]]></title>
    <link href="http://SanghyukChun.github.io/blog/5/"/>
    <updated>2013-07-27T17:15:00+09:00</updated>
    <id>http://SanghyukChun.github.io/blog/5</id>
    <content type="html"><![CDATA[<p>진짜 rails 개발할 때 제일 귀찮았던 것이 rake를 하려고만 하면 버전이 안맞아서 bundle exec를 붙여줘야 했던 점. 물론 강제로 내가 버전을 낮추면 되지만 왜 굳이 잘 쓰고 있는 rake의 버전을 낮추냐는 마인드로 계속 썼었다. 그게 가능했던 이유는 사실 rails 개발할 때 rake는 생각보다 그렇게 빈번하게 쓰지 않는다. 주로 <code>rails s</code>(혹은 <code>rails server</code>) 아니면 가끔 디버깅 용 <code>rails c</code>(혹은 <code>rails console</code>)을 쓰고는 했는데 이녀석들은 거의 출근해서 실행시키면 거의 퇴근할 때 까지 다시 실행시킬 일 없이 쭉 실행된다 -_-;; 근데 블로깅을 하니깐 이게 죄다 rake다. Rakefile을 바꿔버리는 방법도 있지만 굉장히 귀찮기 때문에 그냥 그런 귀찮은 짓을 하느니.. 뭐 그래서 그냥 일일이 치고 있다 하하..</p>


<p>근데 이것도 한 두번이지.. 게다가 이건 포스트 쓸 때는 물론이고 preview 심지어 deploy까지 죄다 rake를 때려야 한다. 포스트 하나 당 최소 세번 -_-;;; 결국 안되겠다 싶어서 deploy.sh라는 녀석을 만들기로 결정</p>


<p>```</p>

<h1>!/bin/bash</h1>

<p>bundle exec rake deploy
```</p>

<p>이게 끝이다. 그리고 deploy할 때마다 이름 묻는게 너무 귀찮아서 (password는 그러려니 한다. 맘에 안들면 ssh키를 쓰면 되는데 귀찮아서 -_-; 근데 조만간 쓰게 될 듯) remote origin의 url을 https에서 ssh로 바꿔버렸다.</p>


<p><code>
git remote set-url origin git@github.com:SanghyukChun/SanghyukChun.github.io.git
</code></p>

<p>음.. 바꾸고 나서 아직 deploy를 안해봤는데 이 포스트가 잘 올라가면 성공이고 안되면 다른 해법을 찾아야 한다 이런.</p>


<p>아무튼 귀찮은 것은 질색이기 때문에 좀 여러 방면에서 편하게 블로깅을 할 수 있는 툴들이나 스크립트를 많이 쓰게 될 것 같은 스멜~</p>


<hr>


<p>--- 추가</p>


<p>아 ssh로 바꾸기는 해놨는데 ssh키가 등록이 안되어있어서 결국 도로묵이었다. <a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a>보고 순서대로 따라서 하니깐 잘 등록 완료. 이제 deploy만 하면 된다~</p>


<p>--- 또 추가</p>


<p>아 범인을 발견했다. octopress에서 github pages에 대해서는 _deploy 밑에 따로 프로젝트를 관리하는데 나는 그걸 모르고 octopress의 url만 열심히 고치고 있었다 ㅋㅋㅋ blog_directory/_deploy/.git/config 를 고쳐야 한다. 즉, 다시 말해서 위에서 언급한</p>


<p><code>
git remote set-url origin git@github.com:SanghyukChun/SanghyukChun.github.io.git
</code></p>

<p>요놈은 root가 아니라 _deploy에서 실행시켜야 한다는 의미!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress - CSS 변경하기]]></title>
    <link href="http://SanghyukChun.github.io/blog/4/"/>
    <updated>2013-07-27T16:17:00+09:00</updated>
    <id>http://SanghyukChun.github.io/blog/4</id>
    <content type="html"><![CDATA[<p>평일에는 조금 바빴고 주말을 맞아 블로그를 다시 Customize하고자 간단하게 Document를 훑어보고 당장 Twitter Bootstrap을 적용시켰다. 한가지 당황했던 점은 Bootstrap이 2에서 3으로 version up 되면서 docs페이지가 완전히 정전 상태.. 그냥 급하게 Bootstrap team blog에서 다운받아서 소스만 붙여 넣었다. 나중에 version 3으로 업그레이드 되면 바꿔줘야 할 것 같은 부분이다. (근데 About Me 실컷 Bootstrap CSS Customizing하고 필요없는거 다 지우고 comon.css로 몰아놓고 1주일도 안되서 ver.3이라니.. deploy완전히 끝나면 훑어보고 마음에 들면 About Me를 통채로 들어내야 할수도;;)</p>


<p>아무튼, css를 바꾸는 방법은 간단했다. 공식 <a href="http://octopress.org/docs/theme/styles/">document</a>를 보면 <code>sass/custom/_style.scss</code>를 수정하면 된다고 한다. 간단하게 override하라는 의미인데, Bootstrap을 그냥 들어다가 붙이기만 해도 꽤 나름 훌륭한 스타일링이 된다. 내가 Bootstrap을 사랑하는 이유. 다만 폰트가 마음에 들지 않아서 (이상하게 대부분의 사이트가 그러하듯 sarif를 기본 폰트로 지정하면 윈도우 크롬 환경에서 폰트가 깨지는 경우가 종종있다.) 구글 웹폰트에서 나눔고딕코딩으로 적용시커주었다. 굳이 나눔고딕코딩으로 적용한 이유는 아무래도 이 블로그에는 코딩이 많이 들어갈 것 같고 간단하게 문서를 읽기에는 역시 나눔고딕코딩이 괜찮을 것 같아서이다. 방법은 간단하다 <code>sass/custom/_style.scss</code>에 아래처럼만 넣어주면 된다</p>


<p><code>
@import url(http://fonts.googleapis.com/earlyaccess/nanumgothiccoding.css);
body {
  font-family: "Nanum Gothic Coding";
}
</code></p>

<p>물론 나는 Bootstrap에 넣은 것이기 때문에 Bootstrap에서 body에 해당하는 부분만 바꾸어 주었다. 추가로 pre, code에 해당하는 부분 등에도 font-family가 설정되어 있어 그 부분도 마찬가지로 수정. 이렇게 처리하면 어렵지 않게 CSS style을 변경할 수 있다. 이제 layout을 뜯어고칠 차례!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 설치하고 포스팅하기]]></title>
    <link href="http://SanghyukChun.github.io/blog/2/"/>
    <updated>2013-07-25T20:00:00+09:00</updated>
    <id>http://SanghyukChun.github.io/blog/2</id>
    <content type="html"><![CDATA[<p>블로그를 설치하면서 했던 작업들을 간단하게 기록 겸 정리해서 올려본다.</p>


<h4>Github Pages</h4>


<p>먼저 Github에서 제공하는 Pages를 사용해 블로그로 사용할 repository를 만들어야한다. Github Pages란 github에서 제공하는 일종의 호스팅같은 개념인데 무엇보다 가장 좋은 점은 역시 '공짜'라는 것. 전혀 비용도 들지 않고 웹프로그래밍에 익숙한 사람이라면 금방 사용할 수 있을 정도로 아주 손쉽고 간편하다.</p>


<p>Github는 당연히 알고 있다고 가정하고, Github Pages를 만드는 과정에 대해서 간략하게 설명하도록 하겠다. 먼저 자신의 이름으로 된 repository를 만들어야한다.</p>


<pre>username.github.io</pre>


<p>위와 같이 만들면 되고, 나의 경우는 SanghyukChun이 username이니 <code>SanghyukChun.github.io</code> 처럼 만들면 된다. 아주 간단!</p>


<p>맨 처음 만들 때 Readme등으로 initialize를 해도 괜찮지만 지금은 일단 하지 말고 그냥 만들어두기만 한다. 원래 이 상태에서 Setting에서 Github Page를 만들고하는 과정이 더 있어야하지만 지금은 Octopress를 Pages Root에 설치한다고 가정했을 때를 기반으로 설명하기 때문에 생략하겠다. Github Pages에 대한 자세한 설명은 <a href="http://pages.github.com/">공식 도큐먼트</a>에서 확인할 수 있다.</p>


<h4>Octopress 설치하기</h4>


<p>Octopress는 Ruby 기반으로 만들어진 Framework이므로 당연히 Ruby가 필요하다. 나는 이전에 Rails개발을 했었기 때문에 루비도 1.9.3으로 버전업이 되어있고 rvm이나 rake도 전부 최신버전이므로 아무 문제 없이 넘어갔으므로 이 부분에서 문제가 있다면 추가 구글링을 필요로 할 것이다. 이 포스트는 '당연히' git도 미리 깔려있고 '당연히' Ruby나 기타 rvm이니 rake니 하는 것들도 전부 최신이라 이 부분에서 아무런 문제가 없는 사람들이 이 글을 읽을 것이라고 가정하고 썼으므로 해당 부분에서 문제가 생긴다면 마찬가지로 추가 구글링을 필요로 할 것이다.</p>


<p>일단 octopress repository를 clone해야한다. 지금 clone하는 repository는 앞으로 모든 블로그작업을 하게 되는 workspace가 된다. 편한 위치에 받자</p>


<pre>git clone git://github.com/imathis/octopress.git octopress</pre>


<p>이제 octopress directory로 이동한 후 bundle을 설치한다. rails나 ruby 관련 어플리케이션을 작업했던 분들에게는 친숙한 과정일 듯</p>


<pre>gem install bundler
bundle install
rake install</pre>


<p>여기까지 했으면 이제 거의 끝났다. rake할 때 버전 어쩌고 거린다면 bundle exec를 붙여서 bundle exec rake install로 해주면 된다. 모든 rake에 그렇게 해야하는데 이게 rake 버전이 내가 가진 버전이 더 높아서 그런거니 그냥 그러려니 하고 넘어가면 된다. Rails 개발할 때는 너무 귀찮아서 rake를 bundle exec rake로 key binding해버리고 싶은 욕구까지 들었으니.. ㅎㅎ 마지막으로 지금 가지고 있는 Repository를 아까 생성한 github.io Repository에 remote로 추가해줄 차례이다.</p>


<pre>rake setup github_pages</pre>


<p>Github계정을 물어볼텐데 간단하게 입력하면 Repository가 관리하는 프로젝트가 Octopress가 관리하고 있는 https://github.com/imathis/octopress 에서 본인의 Repository로 변경되게 된다. 이제 Deploy를 해보자</p>


<pre>rake generate
rake deploy</pre>


<p>공식 홈페이지에서는 generate을 하고 deploy를 하라고 되어있는데 굳이 generate를 하지 않아도 괜찮을 것 같다. 아무튼 이러면 이제 github.io에 배포가 된거다. 이제 username.github.io로 접속해보면 본인의 Octopress Blog를 확인할 수 있다.</p>


<h4>Octopress로 포스트하기</h4>


<p>이제 Post를 작성해보자.</p>


<pre>rake new_post</pre>


<p>공식 홈에는 rake new_post["post name"]으로도 된다는데 난 에러만 뱉어서 그냥 이렇게 입력하고 그 다음 post이름을 입력한다. 이렇게 하면 source/_post 아래에 markdown문서가 생성된다. 그 파일을 수정하면 된다. sublime ~~~~.markdown으로 들어가면 (별다른 설정이 없다면 sublime ~~~으로 sublime을 못 쓴다. 뒷 문단에 설명해놓았으니 참고하길)</p>


<pre>---
layout: post
title: "Octopress 설치하고 포스팅하기"
date: 2013-07-25 20:00
comments: true
categories: 
---</pre>


<p>이제 이 파일에서 간단한 설정을 해주고 (<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a> 참고) --- 바로 아래줄 부터 작성하면 된다. 포스트는 전부 HTML기반으로 작성해야한다. 다시 말해서 그냥 웹에서 작성하듯 작성할 수가 없다는 의미이고 그 귀찮은 html코딩을 매번 해야한다. 다른 방법이 없어보이지는 않는데 지금은 다른 어플리케이션을 찾기도 귀찮고 해서 그냥 편집기로 코딩하고 있다. 따라서 편집기를 하나 마련하는 편이 정신 건강에 좋은데 당연히 강력하게 Sublime Text를 주장하는 바이며, Emmet Package를 설치하여 귀찮은 html코딩을 좀 재밌고 간편하게 하기를 강력 권장한다. 이 녀석을 사용하면 정말 편하다. 특히 <code>&lt;p&gt;&lt;/p&gt;</code> 같은 귀찮기 그지없는 녀석들도 간단하게 p를 입력하고 tab만 입력하면 된다. 오오 아름다운 세상. 터미널에서 작업이 모두 일어나기 때문에 아래 symbolic link를 한번 생성하여 터미널에서도 열 수 있도록 작업하는 편이 덜 귀찮을 것이다.</p>


<pre>ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime</pre>


<p>한번만 symbolic link를 생성하고나면 terminal에서도 <code>sublime test.txt</code> 와 같은 형태로 sublime실행이 가능하다. 이제 작성만 하면 된다.</p>


<p>어느정도 작성이 끝나고 preview가 필요하다고 생각되면 아래의 명령어를 입력한다.</p>


<pre>rake preview</pre>


<p>localhost:4000에 간단한 웹서버를 띄워준다. 메시지 나오는걸 봐서는 rails기반인듯. rails가 없는 컴퓨터에서 돌아가는지 여부는 확인 안했지만 아마 충분히 가능할 것 같다. 편집을 하다가 변경사항을 저장하면 그 즉시 asset이 reload되서 바로 새로고침으로 확인할 수 있다. 매번 deploy해야하는 자바 뻐큐머겅 ㅗ 두번머겅 ㅗㅗ 어느 정도 편집이 끝났으면 이제 배포를 하자</p>


<pre>rake deploy</pre>


<p>맨 처음 블로그를 배포했던 그 명령어 그대로 하면 된다. 이제 코드가 github로 push되고 github.io 페이지로 들어가서 배포한 post를 확인하면 끝난다. 이 포스트는 <a href="http://octopress.org/docs/">공식 도큐먼트</a>의 <a href="http://octopress.org/docs/setup/">initial setup</a>, <a href="http://octopress.org/docs/blogging/">blogging basic</a>, <a href="http://octopress.org/docs/deploying/github/">deploying to github pages</a>를 참고하였다.</p>


<p>앞으로 블로그 커스터마이징도 하고 세팅도 많이 변경할텐데 변경 사항들은 그때그때 블로그에 포스팅하려한다. 나도 도움이 되고 구글링을 하다가 지친 누군지 모를 그 사람에게도 도움이 되겠지.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress와 함께하는 첫 번째 post]]></title>
    <link href="http://SanghyukChun.github.io/blog/1/"/>
    <updated>2013-07-25T18:49:00+09:00</updated>
    <id>http://SanghyukChun.github.io/blog/1</id>
    <content type="html"><![CDATA[<p>Blog를 참 많이도 옮기는 것 같다. 맨 처음 네이버 블로그, 야심차게 옮겼던 티스토리, 워드프레스.. 그리고 지금 옮기게 된 Octopress까지..</p>


<p>사실 블로깅도 제대로 많이 안하면서 굳이 Octopress로 옮긴 이유는 사실 그냥 요새 뭔가 만들고 싶은 욕구가 있었고 최근 About Me 작업을 하면서 알게 된 Github Pages로 뭔가를 할 수 없을까라는 생각이 들어서이다. 생각을 해보니 가장 무난하고 많은 것을 시도해 볼 수 있는 것이 블로그라는 생각이 들어서 실제 구현 사례들을 찾아보았고 Octopress라는 재미난 어플리케이션을 발견해 이걸 직접 써보기로 마음 먹었다.</p>


<p>요즘 사용하는 머신이 대부분 윈도우이기 때문에 사실 Octopress는 좋은 대안은 아니다. 기본적으로 대부분의 작업이 Terminal에서 일어나야하고 Ruby로 작업된 녀석이기 때문에 윈도우에서 사용하다가는 정말 충격과 공포에 빠질 수가 있다. 하지만 나는 맥이 있으니 맥프로로 작업을 하면 되겠지~ 라는 생각으로, 거기다가 루비는 내 메인 언어 중 하나기도 하니깐 한번 도전해봤다.</p>


<p>아직 레이아웃을 바꿔보지는 못 했지만, Octopress로 넘어오면서 가장 기대가 되는 점은 Customizing이다. 사실 티스토리와 워드프레스도 내가 직접 무언가를 만들고 도전해볼 수는 있지만 내가 관리하는 시스템이 아니고 재미가 없달까나. 나는 정말 처음 css부터 뜯어고치는게 재밌는데 말이지. 아무튼 요새 하는 일들이 조금 정리가 되면 블로그 디자인 작업은 바로 시작할 생각이다. 재미있는 블로깅 라이프가 되기를!</p>

]]></content>
  </entry>
  
</feed>
