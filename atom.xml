<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[README]]></title>
  <link href="http://SanghyukChun.github.io/atom.xml" rel="self"/>
  <link href="http://SanghyukChun.github.io/"/>
  <updated>2013-10-23T07:31:40+09:00</updated>
  <id>http://SanghyukChun.github.io/</id>
  <author>
    <name><![CDATA[Sanghyuk Chun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[그래비티 - 스케일이 다른 재난 영화(스포)]]></title>
    <link href="http://SanghyukChun.github.io/22/"/>
    <updated>2013-10-22T16:48:00+09:00</updated>
    <id>http://SanghyukChun.github.io/22</id>
		<content type="html"><![CDATA[<p>우주에서 사람이 과연 살아남을 수 있을까? 항상 공상과학영화를 보거나 혹은 소설을 읽다보면 드는 생각 중 하나였다. 이런 아이디어가 실제 영화로, 그것도 IMAX 3D로 구현되어 상당히 흥미로웠다. 아마 우리의 거의 대부분이 절대 죽을 때 까지 경험해 볼 수 없을 우주에서 일어나는 일들을 거의 완벽하게 시뮬레이션으로 구현한 영화라고 하여 더욱 기대가 갔다. 실제로 가서 관람해보니 <a title="문제가 있는 부분들은 실제 도입부에 문제가 되었던 위성 폭발이 영화에서 묘사되는 것 처럼 극적인 결과를 불러일으키지 않는다는 사실이고, 또 하나는 허블우주망원경의 위치와 ISS, 중국 우주정거장의 위치 등이 절대로 영화에서 묘사되는 만큼 가깝지가 않다는 점 정도.." class="red tip">일부 사실과 맞지 않는 문제</a>가 있는 부분이 있기는 하지만 대부분 무중력 상태에서 발생하는 상황을 매우 잘 고증해내어 놀랐다.우주에 대한 묘사도 아름다웠지만, 그 뿐 아니라 영화 전체적인 흐름이나 촬영기법 또한 정말 훌륭했다. 그 중에서 특히 인상 깊은 장면은 초반 도입부의 롱테이크 씬이었는데, 우주에서 바라본 지구의 모습을 롱테이크로 가져가면서 휴스턴과 교신하는 익스플로러 호와 허블 우주망원경이 점점 가까워지는 씬이었는데, 이 씬하나로 우주의 광활하고 고요한 장면을 극적으로 잘 묘사해낸 훌륭한 연출 방법이었다. 그 소름끼칠 정도의 적막함. 그리고 그 엄청나게 큰 우주에서 인간은 얼마나 작은 존재인지 도입부의 롱테이크 씬을 통해서 다시 한번 상기하게 되었다. 그리고 또 인상 깊었던 촬영 기법 중 하나는 주인공이 바라보는 시선과 주인공을 바라보는 시선을 자연스럽게 교차하며 보여주는 장면이었는데, 닥터 스톰이 패닉에 빠져있을 때 그 암울하고 당황스러운 상황을 관객들도 공유할 수 있도록 하는 정말 좋은 연출이었다고 생각한다.</p>


<p>위에서 극찬한 우주에 대한 묘사나 촬영 기법 등의 기술과는 다르게 시놉시스는 매우 간단해서 허블 우주 망원경을 고치러 올라간 특수임무팀이 조난당해 지구로 목숨을 걸고 돌아가는 것이 전체 이야기 흐름의 전부이다. 그러나 실제 이야기가 흘러가는 과정은 긴박하기 그지없는데, 특히 첫 번째 충돌에서 방방거리면서 좋아하던 우주 비행사가 바로 파편에 맞아 즉사했을 뿐 아니라 익스플로러호도 파편에 충돌하면서 내부 승무원들이 전부 몰살당하는 장면은 비극적이고 소름끼치는 장면이었다. 그리고 화재와 두 번째 충돌 인해 ISS가 완전히 박살이 나는 장면은 이 영화의 하이라이트라고 할 수 있을 것 같은데 정말 처참하게 부서지고 또 너무나 적막하게 부서진다. 당연히 진공 상태인 우주에서는 소리를 전달할 매개체가 존재하지 않으므로 눈 앞에서 어마어마하게 큰 폭발이 일어나더라도 내 소유즈 안에서 나오는 소리만 들리고 폭발로 인해 발생하는 소음은 전혀 들리지 않고 소름끼칠 정도로 고요하고 적막한 것이다. 그 이외에도 긴박감을 극대화시킨 장면을 하나만 더 꼽자면 중국 우주 정거장이 대기권으로 추락하면서 불타 없어지는 장면인데, 이 장면 역시 매우 극적이었다.</p>


<p>우리가 생각할 수 있는 외로움은 우주에서 조난 당한 것에 비해면 감히 견줄 수 없을 것이다. 내가 살 수 있는 가망이 전혀 없다는 것을 알고 있고 당연히 희망조차 존재하지 않는다. 죽고나서도 아무도 나의 위치를 알 수 없고 내 유해조차 수습할 수 없는 상황인 것이다. 생각만 해도 소름끼치게 무섭다. 그런데 <a class="red tip" title="배우: 조지 클루니">맷 코왈스키</a>는 그런 상황에서 냉철하게 자신을 버리고 <a class="red tip" title="배우: 산드라 블록">스톤 라이언</a>을 살린다. 물론 군인이고 이런 극단적인 돌발상황에 익숙하고 잘 훈련받았겠지만 그거랑 진짜 내가 죽는 것은 다른데 그렇게 할 수 있다는 것이 너무 충격적이었다. 물론 영화를 더 극적으로 만들기 위한 연출에 불과하지만.. 심지어 맷이 로프를 끊고 멀리 날아갈 때도 우주 유영 기록을 깰 수 있을 것 같다느니 겐지스 강 너머로 뜨는 해가 아름답다는 소리나 하고 있으니 자신의 상황과 얼마나 대조되는 행동인가. 심지어 자신이 죽어가는 그 와중에도 ISS에 들어갈 수 있도록 끝까지 독려하고 무선으로 지시하여 닥터가 ISS에 들어갈 수 있게 만들었으니 닥터 스톤이 살아남을 수 있었던 가장 큰 원동력이었던 셈이다. 그래서 중간에 갑자기 소유즈 내부로 맷이 도어를 오픈하고 들어왔을 때 당연히 이게 말이 안되는 상황이고 아닐 것이라는 생각이 들었지만 순간 진심으로 맷이 진짜 살아돌아온 것이기를 빌었다. 현실은 아 시밤 꿈이었지만.. 그래도 그 덕분에 닥터 스톤이 각성해서 살아날 수 있었고 허무하게 자신의 목숨을 내던지는 것이 아니라 끝내 탈출에 성공하고 지구로 돌아오지 않았는가.</p>


<p>처음에 우주유영을 하는 장면에서 맷이 닥터 스톤에게 물어본다. 우주에서 뭐가 제일 좋냐고. 스톤은 딱 한 단어로 대답한다. &#8216;Silence&#8217; 하지만 조난당하고 모든 교신이 끊어지고 정말 우주를 증오한다고 말하는 모습을 보면 결국 자신이 우주에서 가장 좋았던 것이 자신을 가장 무섭고 공포에 처하게 했다는 사실이 아이러니 하다. 심지어 이 쥐 죽은 듯한 침묵은 영화의 가장 극적인 장면에서도 계속되는데, 잘 들어보면 심장소리를 제외하고는 아무런 소리도 들리지 않는다. ISS가 박살이 나고 우주 쓰레기가 주인공을 덮쳐도 쓸데없는 효과음은 없다. 이 영화의 가장 뛰어난 효과음은 바로 고요였다. 그래서인지 중간에 소유즈에서 지구와 통신이 되었을 때 개 짖는 소리와 아이 소리에 닥터가 그렇게 반응하고 끝내 울음을 터트리게 되었을 것이다. 또 재미있게도 닥터 스톤에게 다가온 맷의 환영이 말한 우주의 아름다움은, 마찬가지로 고요였다. 우주선의 모든 전원을 끄고 가만히 눈을 감고 있으면 세상과 완전히 분리되어 있는 그 기분. 아무도 나를 상처주지 않고 나도 남들에 의해 상처받지 않는 완벽한 상황. 이 영화에는 항상 그 Silence가 다양한 관점에서 계속 해석이 된다. 정말 고요함, 혹은 적막함 이상의 단어가 있으면 좋겠는데 불행히도 내 짧은 어휘실력으로는 이를 설명할 수 없다는 것이 안타깝다.</p>


<p>이 영화는 더욱 더 극적인 효과를 위한 적절하고 완벽하다고 할 수 있는 촬영 기법과 연출을 선보였다. 그 뿐아니라 씬도 아주 훌륭하고, 비록 간단한 시놉시스임에도 불구하고 말로는 설명할 수 없는 긴박함으로 끝까지 긴장을 풀 수가 없다. 이 영화를 통해 바라본 우주는 너무나도 아름답지만 그 아름다움과는 대조적으로 너무 소름끼치게 무서웠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[게임빌 강연을 듣고 문득 떠오른 생각들]]></title>
    <link href="http://SanghyukChun.github.io/20/"/>
    <updated>2013-10-16T18:02:00+09:00</updated>
    <id>http://SanghyukChun.github.io/20</id>
		<content type="html"><![CDATA[<p>오늘 학교에서 게임빌 송병준 대표님의 강연이 있었다. 게임빌 대표님의 강연을 듣고 있으니 2년 전에 동아리에서 했던 컴투스와 게임빌 분석 세션이 생각이 났다. 그러니깐 그때가 2010년 봄, 스마트폰이라는 것이 통신사들의 밥그릇 싸움에 외국에 비해 어마어마하게 늦은 속도로 도입이 된 것은 물론인데다가, 게임 규제라는 말도 안되는 정책이 시작되고 있던 그 시기였다. 그 당시가 얼마나 막막했느냐면, 안드로이드 스토어, 지금의 플레이스토어에서 게임 항목이 따로 없었을 정도다. 거기다 사전 심의라는 말도 안되는 제도가 있어서 사실상 한국 앱 마켓에서 게임을 개발해서 팔아먹는다는 것이 말도 안되는 일이었던 시절이었다. 그런 시기에 게임빌의 주가는 대략 3만 5천원 내외. 그마저도 한번 크게 상승해서 그 정도였다. 앞서 말한대로 상황은 점점 나빠지고 거기에다가 피쳐폰 개발에서 스마트폰 개발이라는 전혀 다른 상황에 봉착했기 때문에 나는 당연히 게임빌과 컴투스는 처참하게 망할거라고 생각했다. 도저히 비전이 보이지 않고 한국에서 모바일 게임 개발을 하느니 차라리 그 돈으로 저축이나 하라고 하고 싶을 정도로 우리나라 IT, 그리고 게임 시장은 처참하기만 했다. 그러나 결국 사전 심의라는 말도 안되는 제도는 끝내 폐지가 되고 한국 구글 마켓에서도 게임 탭이 생기게 되었다. 그때 우리나라에 매우 뒤늦은 앵그리버드 열풍이 몰아닥치게 되었고, 사람들이 너도나도 스마트폰으로 게임을 하기 시작했다. 그리고 놀랍게도, 내가 당연히 망할 것이라 생각했던 컴투스와 게임빌은 살아남았다. 주가가 3만5천원이었던 게임빌은 2년 뒤 주가가 8만원이 되고 12년 말에는 14만원을 뚫는 기염을 토한다. 지금은 비록 조금 꺾이긴 했지만, 분명 내가 예측한 것과는 전혀 다른 방향이었다.</p>


<p>만약 내가 그런 상황에 처했더라면 나는 어떻게 행동했을까. 나는 희망을 잃고 국내 시장을 아예 포기하거나 심지어 회사를 접을 생각을 했을지도 모른다. 어쩌면 누구보다 확신에 가득차서 아이팟 터치와 새로운 스마트폰의 시대를 미리 예측하고 그 곳에 올인했을 수도 있지만, 그 상황이라면 그런 희망조차 보이지 않았을 것 같다. 그게 어쩌면 진정한 기업가 정신이고 안되는 것을 되게하는 정신이 아닐까. 비관적으로 세상을 바라보는 것이 다양한 관점을 제공한다는 입장에서 봤을 때 좋을 수도 있지만, 이렇게 극단적인 상황에서는 먼저 비관하고 좌절하기보다 어떻게 이 상황을 헤쳐나갈 수 있을까를 고민하는 것이 맞았을텐데. 아무튼 내 생각과는 반대로 게임빌은 살아남았고 성공했다. 결국 컴투스까지 인수하게 되었지. 시간이 지날수록 정부의 말도 안되는 게임 규제와 탄압은 심해지고 그것에 현혹되는 학부모들이 학생들에게 게임이란 나쁜 것이라는 인식을 심어주게 되면 마치 90년대 만화처럼 산업 자체가 고꾸라질수도 있는데 그런 압박감 속에서도 꿋꿋하게 자신들의 길을 찾아가는 이런 점들이 진짜 멋지고 대단한 것 같다.</p>


<p>그런데 그것과는 별개로, 카카오톡 게임 이후의 모바일 게임은 양상이 많이 바뀌었다. 카카오톡 게임으로 인해 게임이 전 연령층으로 급속하게 확대되고 모바일 게임 전체 시장의 크기가 급속하게 커진 것은 맞지만, 모바일 게임은 너무 라이프 사이클이 짧고 개발 비용은 더 들어가는 상황이라 한 방에 대박을 내야지, 안그러면 진짜 답이 안서는 상황에 처하게 된다. 그러다보니 게임사들의 선택은 외국에서 검증받고 잘 팔리는 게임들을 그냥 배껴버리자. 그런 예시들이야 진짜 수없이 많으니 굳이 내가 열거할 이유는 없겠지. 아무튼 이런 카피캣들은 전반적인 게임 산업의 질을 떨어트리고 서로가 서로를 침식하는 암적인 존재와 다를바가 없다. 내가 한 가지 실망한 것은, 송병준 대표님에게 이런 상황에 대해 질문했을 때 다른 게임에서 어느 정도 &#8216;벤치마크&#8217;를 해왔더라도 분명 보이지 않는 무언가 다른 점이 있고 새로운 시도가 들어간다는 대답. 작은 변화가 있거나 없거나 그 이전에 이미 배껴버린 게임인데 그건 좀 아니지 않을까&#8230; 물론 게임 업계 상황은 십분 이해하지만, 결국 이렇게 가다가는 아까와는 다른 이유로 전체 산업이 넘어질 수도 있다고 나는 그렇게 생각하기 떄문에, 현업 중 가장 핫한 기업의 대표에게 새로운 인사이트를 얻고 싶었지만 결국 얻지 못했다는 사실에 실망했다. 물론 전체 대답은 훌륭하셨다, 옳은 말을 하셨고, &#8216;좋은 게임&#8217;을 만들면 괜찮을 거라는 얘기를 해주셨는데, 내가 궁금한건 그 &#8216;좋은 게임&#8217;이란 무엇인지 였고, 사실 그 부분을 다시 질문했을 때 대표님의 대답은 나를 만족시키지 못한 것이 사실이다. 나는 어차피 게임 쪽으로 나아갈 생각을 하고 있지는 않지만, 한 명의 게이머로서, 게임을 사랑하는 사람 중 하나로서 진심으로 걱정이 되어 고민하고 있는 주제이지만, 또 막상 현업에서는 당장 기업이 죽느냐 사느냐를 쥐락펴락 하는 주제이다 보니 민감하기도 하고 다소 부정적이지 않게 바라보는 것 같기도 하다.</p>


<p>어찌되었건, 간만에 무언가 강연을 듣고 자극이 된 것 같다. &#8216;저도 여러분들과 다를바 없는 학부생이었습니다&#8217;라는 얘기나, &#8216;이민화 교수님의 강연을 듣고 무언가 길을 찾은 것 같았습니다&#8217;와 같은 얘기들은 어느새 국내 벤처와 관련된 모든 것들을 너무나 비관적이고 삐딱한 시선으로만 바라보던 나에게 정말 순수하게 열망하던 그 시기의 감정을 조금이나마 불러일으켜준 것 같아서 좋았다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.10.7]]></title>
    <link href="http://SanghyukChun.github.io/19/"/>
    <updated>2013-10-07T04:41:00+09:00</updated>
    <id>http://SanghyukChun.github.io/19</id>
		<content type="html"><![CDATA[<p>방학 동안 계속하던 연구의 유종의 미를 거두기 위해 (원래 참여할 계획이 아니었던) 논문을 쓰게 된지 이제 대략 1주일이 조금 넘어가는 것 같다. 페이퍼의 데드라인은 이번 주 토요일. 정말 너무너무 바쁜 하루하루가 지속되고 있지만, 아직 학부생이고 대학원에 진학하기 이전에 이런 경험을 할 수 있다는 것은 굉장히 값진 경험이라고 생각된다. 그냥 대충 작성하는 학부 수준의 논문도 아니고 굉장히 높은 수준의 학회에 제출하는 논문을 단시간 안에 작성하면서 배우는 것들은 절대로 무시할 수 있는 양이 아니라고 본다. 대신 그 기간동안 어마어마하게 힘들다는 단점이 분명 존재하는 것 같지만 ㅎㅎ</p>


<p>대학원에 들어가게 되면 사수가 있는 지금과는 달리 거의 교수님과 1대1로 프로젝트나 논문을 쓰게 될 것 같은데, 엄청나게 많은 시행착오를 거쳐야 진짜 내 논문을 쓸 수 있을 것 같다. 꼭 석사 때 논문과 프로젝트를 최대한 많이 해볼 수 있도록 해야겠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10년차 힙덕이 본 Control 대란]]></title>
    <link href="http://SanghyukChun.github.io/18/"/>
    <updated>2013-09-04T16:20:00+09:00</updated>
    <id>http://SanghyukChun.github.io/18</id>
		<content type="html"><![CDATA[<p>대략 2004년부터 힙합을 듣기 시작했으니 나름 10년가까이 힙합을 들었다고 할 수 있겠다. 오랜 기간 힙합을 듣다보니 꽤 Deep 하게 들었고 한국 힙합에 한정하여 어느 정도는 전문가라고 스스로를 지칭해도 부끄러움이 없을 정도가 되었다. 그런 나에게도 지난 Control 대란은 꽤 흥미로웠다. 근래는 힙합보다는 다른 장르를 더 집중하여 듣다보니 다른 사람들이 그러하듯 나 역시 E-Sens의 개코 디스에 (사실 아메바 컬쳐 디스라고 보아야하지만) 이번 사건(?)에 관심을 가지게 되었다. 일단 간단하게 왜 이런 일이 일어났는지 살펴보자면, 발단은 켄드릭 라마의 디스곡 Control Freestyle이었다.</p>


<iframe width="420" height="315" src="http://SanghyukChun.github.io//www.youtube.com/embed/SaMreUKk5Fk" frameborder="0" allowfullscreen></iframe>


<p>정확히 말하면 켄드릭 라마 곡은 아니고 Big Sean의 곡에 피쳐링한 Verse가 대박이었는데, 이게 그냥 냅다 거의 대부분의 미국의 힙합 뮤지션들에게 &#8216;예전의 정신은 어디가고 다 트렌디한 것만 따라가면서 음악을 하고 있지 않다&#8217; 뭐 이런식으로 광역 도발을 해버렸다. 실제로 많은 뮤지션들이 이름이 가사에서 &#8216;언급&#8217;되었다.</p>


<p><img src="http://postfiles16.naver.net/20130908_15/drunkenflow_1378570680816vBzCt_JPEG/CYMERA_20130908_011147.jpg?type=w2" alt="켄드릭 라마"></p>

<p>출처는 <a href="http://blog.naver.com/PostView.nhn?blogId=drunkenflow&logNo=120197751622" target="new">여기</a>. 아무튼 정말 장난아닌 디스가 나온 것. 그래서 미국 쪽에서 꽤 후끈해지고 서로 디스전이 좀 오고갔다. 이건 나도 잘 몰라서 hiphople쪽 자료를 퍼왔다. 관심있으면 이 링크로 이후 주고 받은 디스곡을 들어보면 될 것 같음 <a href="http://hiphople.com/freeboard/954132">http://hiphople.com/freeboard/954132</a> 아무튼 이제 이걸 보고 스윙즈가 감명을 받아 한국 힙합을 모두까기인형 모드로 광역 도발을 시전했는데&#8230;</p>


<iframe width="420" height="315" src="http://SanghyukChun.github.io//www.youtube.com/embed/2ozXM5rInT8" frameborder="0" allowfullscreen></iframe>


<p>&#8230;정말 못했다. 스윙즈가 원래 좀 편차가 큰 편이긴 하지만 이건 너무 실망스러워서 각종 커뮤니티에서도 &#8216;이건 도대체 왜 한거지;;&#8217; 이런 분위기였다. 무엇보다 레코딩이 최악이다. 마스터링을 빡시게는 안하더라도 최소한의 믹싱이랑 사운드 손질은 했어야했는데 듣기가 너무 힘들 정도..</p>


<iframe width="420" height="315" src="http://SanghyukChun.github.io//www.youtube.com/embed/RNzPZdeqAUE" frameborder="0" allowfullscreen></iframe>


<p>그래서 나온 몇 개의 &#8216;답가&#8217; 중 하나이다. 나중에 King Swings part2에서도 언급했던 테이크원의 디스곡.. 그 밖에도 야수, 어글리덕, Deep Flow 등이 Control에 가사를 썼지만&#8230;</p>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F106746120"></iframe>


<p>그렇다 그 분의 등장. E-Sens가 현재 한국 힙합에서 제일 거대하고 영향력이 거대하다고 할 수 있는 아메바 컬쳐를 디스하며 폭풍의 핵으로 떠올랐다. 그런데 여기에서 이제 이 디스전의 성향이 조금 바뀌기 시작했다. 원래 디스라는 것은 Disrespect, 즉 그냥 내가 상대방을 respect하지 않는 다는 것이고 그것을 랩으로 표현하고 당신이 내 생각에 동의하지 않는다면 랩으로 대응해라! 이런게 디스다. (물론 east west나눠서 싸울 때는 총질도 하면서 살벌하게 했지만 2pac과 bigge가 죽고 나서 더 이상 그런 분위기는 아니다.) 그런데 이 곡을 기점으로 모든 곡이 다 폭로전으로 바뀌어버렸다. 사실 그래서 개코가 굳이 대응을 하지 않아도 되었으나, 개코가 맞디스곡을 들고 나왔다.</p>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F106911540"></iframe>


<p>E-Sens 디스의 주 내용은 아메바 컬쳐에서 느꼈던 각종 불합리함 그리고 &#8216;10억 계약&#8217;이 주 내용이다. 즉, 내가 당신을 disrepect한다는 것이 아니라 자신이 겪은 불합리한 것을 폭로하는 분위기&#8230; 만약 이게 사실이 아니거나 E-Sens가 다소 피해망상으로 과장해서 느낀 것이라면 이건 그냥 바로 법정 대응을 해버리면 그만이다. 그런데 개코는 이렇게 다시 음악으로 E-Sens에게 대답을 해주었다. 나는 사실 이 장면이 제일 멋지고 감동적이었는데, 사실 이건 법정에서 해야할 얘기이지 디스곡으로 할 얘기는 아닌데 그걸 또 굳이 디스곡으로 맞받아쳤다는 것. 회사를 운영하는 사람이 아니라 정말 힙합을 하는 랩퍼로 존경할 가치가 있다는 생각이 들었다.</p>


<p></p>

<p>완전 뜨겁게 달아오른 힙합판은 Swings의 part2와 Simon D의 가세, E-Sens의 두 번째 디스곡 true story 등으로 후끈해졌지만, 본질 자체가 폭로전으로 변질되어버렸기 때문에 다소 아쉽기는 했다. 그래도 정말 이렇게까지 힙합판이 난리가 난 것이 처음이기 때문에 나름 재미있는 한 주를 보낼 수 있었던 것 같다. 대중적으로 관심을 받지는 못했지만 정말 대박이라고 생각하는 세 곡을 링크하자면, 데드피와 Sunday 2pm이 있다.</p>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F106836946"></iframe>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F106874460"></iframe>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F107154710"></iframe>


<p>먼저 뎊피는 랩도 쩔고 내용도 좋지만 이미 다들 실명 언급하고 치부 까기에 혈안이 된 상태였기 때문에 이슈화가 못되었고, 아웃사이더에게 분이 쌓일대로 쌓인 Sunday 2pm의 두 명이 조인트를 까는 두 곡은 정말 랩을 잘했다. 개코가 랩퍼로써 반격한 것에 비해 계속 침묵하고 있는 아웃사이더는 참 대조적이다.</p>


<p>원래 하려던 말은 개코가 참 멋지다는 말, 그리고 힙합이 이렇게 전국적으로 관심을 받는 것이 재미있다는 것이었는데 쓰다보니 영 사족이 많아진 글이다. 아무튼 본질이 변했고 폭로전으로 바뀐 것은 아쉽지만 힙합 10년 가까이 들으면서 이렇게 모든 국민이 전국적으로 힙합에 관심을 가지고 힙합에 대해 얘기하게 되었다는 사실 자체가 예전보다 힙합이 많은 사람들에게 사랑받고 있다는 의미 같아 기쁘다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[새로운 수요를 만드는 사람들, 메이커스]]></title>
    <link href="http://SanghyukChun.github.io/17/"/>
    <updated>2013-08-17T04:20:00+09:00</updated>
    <id>http://SanghyukChun.github.io/17</id>
		<content type="html"><![CDATA[<p>세상은 바야흐로 &#8216;오픈 소스&#8217;의 시대이다. Spring, Flask, Rails 등의 각종 framework들, Twitter등에서 진행하는 Bootstrap과 같은 소규모 프로젝트들로 대표되는 오픈소스 소프트웨어는 정말 너무나 깊숙히 파고들어 일일이 그 예시를 들 수 없을 정도이고, <a href="http://www.connectinglab.net/wordpress/?p=5850" target="new">리눅스 커널을 기반으로 하는 안드로이드 OS는 심비안, Window Mobile, iOS를 제치고 세상에서 가장 많이 사용되는 스마트폰 OS가 되었다.</a> 하지만 오픈 소스는 결코 소프트웨어만의 고유 영역이 아니며 하드웨어에서도 오픈 소스의 물결이 일렁이고 있다. Maker라는 단어는 우리가 잘 알고있는 Make에 -er 접미사가 붙은 형태로, 의역하자면 &#8216;만들어내는 사람&#8217; 정도로 해석할 수 있다. 이 책에서 말하는 Maker란 기존 제조업 기업들이 생산한 기성품을 구매하고 사용하는 사람들이 아니라 본인이 원하는 것을 직접 &#8216;만들어내는 사람 혹은 기업&#8217; 이다. 그리고 그러한 것이 가능해진 이유를 여러가지 측면에서 설명하고 있다.</p>


<p>근래에 흔히 이슈가 되는 기술 중 하나는 3D 프린터이다. 그냥 프린터로 간단한 3D model을 출력할 수 있는 (생산할 수 있는) 이 장비가 어쨰서 이슈가 되고 있을까? 이유는 간단하다. 이제 누구나 간단한 도면만 있다면 집에서 모든 것을 생산할 수 있는 시대가 오기 때문이다. <a href="http://popsci.hankooki.com/Article/ArticleView.php?UID=1008734" target="new">극단적으로 3D 프린터의 미래를 예측하는 사람들은 불법으로 3D 프린터를 사용하여 각종 물품들을 복제하여 시중에 불법으로 유통하는 산업이 성행할 것이라고 예측하기도 한다.</a> 꽤 많은 사람들이 전자기기를 복제하는 것은 물론이고 심지어는 의약품까지 복제하는 상황을 예측하고 있고 아마 현재 중국에서 카피되고 있는 각종 모조품들과는 스케일이 다르게 전 세계의 제조업의 기반 자체를 붕괴시킬 수 있는 파괴력을 지니고 있다고 믿는 사람도 있다. 그만큼 이 기기는 강력하다. 애플이 가져온 <a href="http://en.wikipedia.org/wiki/Desktop_publishing" target="new">Desktop publishing</a>의 향수를 느끼는 사람들도 이 기기가 가져올 파괴적인 미래에 열광한다. 애플이 가져온 워드 프로세서와 개인용 프린터가 출판업을 대형 출판사와 작가사이의 관계에서 개인이 약간의 돈을 들여서 자비로 출판을 할 수 있는 환경을 조성함으로써 기존의 출판업의 기틀 자체를 붕괴시켰던 그 기념비적인 사건을 추억하며 이번에는 Desktop manufacturing을 기대하는 것이다. 이전에는 발명가가 아이디어가 있고 물건을 만들어도 불합리한 가격으로 그리고 본인이 만들었던 것과 다른 형태로 제품이 판매가 되고 정작 본인에게 돌아가는 수익은 굉장히 미미했으며 그 조차도 확보하기가 너무 힘든 것이 사실이었다. 발명 혹은 제품 개발은 소수의 사람들에게만 허용되고 보호되는 영역이었지만 이제 그러한 구조 자체에 균열이 가고 있는 것이다.</p>


<p>3D 프린터 하나에만 의존한다면 이 주장은 굉장히 약한 주장이고 금방 무너질 것이다. 하지만 3D 프린터가 아니더라도 이러한 미래를 기대하게할 수 있는 장비는 많다. 레이저 커터, CNC 머신, 혹은 본인이 CAD등으로 작성한 도안을 제품으로 구현해주는 수 많은 회사들까지. 기존 대량 생산 방식과 이러한 Maker 장비가 다른 가장 큰 차이점은 바로 판형(mold)이 있느냐 혹은 없느냐의 차이이다. 기존 대량생산은 먼저 판형을 만들고 그 판형을 이용하여 제품을 &#8216;찍어 낸다&#8217; 때문에 하나하나의 제조비는 낮지만 판형을 만드는 비용이 많이 든다. 때문에 개인의 기호 등은 무시되고 가장 무난하고 가장 많이 팔리는 형태로 제작이 될 수밖에 없다. 개인 생산 혹은 소량 생산은 생산 단가를 올리기 때문이다. 하지만 Maker 장비들은 전부 개당 생산 단가가 동일하다. 즉, 우리가 문서를 프린트하듯 그때 그때 생산이 되므로 개당 단가는 100개를 만들건 1000개를 만들건 1억개를 만들건 동일하다. 때문에 비교적 저렴하게 다양화와 소량 생산이 가능한 것이다. 이 영역은 굉장히 생산성이 높은 니치마켓 중 하나로 기대가 되고 있는 개인화 마켓을 직접적으로 공략할 수 있는 파괴적인 수단이고, 심지어 제조업임에도 불구하고 그 비용과 리스크가 작다. 소프트웨어만이 벤처이고 오픈 소스인 것이 아니라 하드웨어도 가능하다는 의미이다. 더 중요한 것은 이미 우리 주변에서 이러한 일이 일어나고 있다는 것이고 굉장히 현실성이 있다는 것이다.</p>


<p>이 책에서 중요하게 언급하는 것 중 하나는 바로 Community이다. 글에서 종종 위원회와 비교를 하는데 아마 Committee가 아닐까 싶다. Comunity는 불특정 다수의 사람들이 서로의 의견을 내는 공간이고 Committee는 소수의 선별된 사람들이 의견을 내는 공간이다. 이 책에서는 바로 Community가 있기 때문에 이런 형태의 사업이 가능하다고 말하고 있다. 대가 없이 도안을 수정하고 노력하는 사람들, Cloud funding등을 통하여 제조비를 제공하는 사람들, 운영에 있어 필요한 수 많은 인력들, 시간과 장소, 학력 등에 관계없이 구할 수 있는 무궁무진한 인력 풀 등이 장점으로 언급되고 있다. 혹은 반대로 생각해보면 이러한 특성 때문에 거대한 기업 형태는 힘들고 계속 고부가가치를 지니는 소형 시장에만 적합하지 않을까라는 생각도 든다.</p>


<p>오픈 소스라는 것은 모든 도안이나 생산 방식이 공개가 되어있다는 점이다. 때문에 자신이 만들고 싶은 물건이 있다면 다른 사람들이 이미 생산했던 물건의 도안을 사용하여 제작하는 것이 가능하고, 다른 사람들도 내가 만든 것을 사용할 수 있는 것이다. 오픈 소스는 때문에 수 많은 사람들간의 커뮤니케이션과 서로의 피드백에 의해서 조악한 prototype에서 완벽한 완제품으로 탈바꿈되는 것이다. (실제로 Ubuntu는 처음에는 굉장히 조악했지만 버전을 거듭하면서 점점 안정화가 되어 지금은 가장 널리 쓰이는 Linux 플랫폼이다.) 하지만 그렇기 때문에 복제품을 피할 수가 없다는 단점이 있다. 한 가지 재미있는 점은, 이 책에서 &#8216;불법 복제&#8217;라는 것을 부정하지 않는다는 것이다. 오히려 그러한 불법 복제가 있다는 것은 자신들의 제품이 인기가 있고 팔리고 있다는 증거이며 더 저렴하고 더 좋은 방안이 있다면 그것도 혁신이며 그들의 방식을 존중하고 우리도 따라야한다는 것이다. 즉, 오픈되어있기 때문에 일어날 수 있는 문제점들을 오픈이 되어있으므로 해결할 수 있는 해결법을 사용하여 해결하는 것이다. 이 책에서 예시로 드는 사례 중에 재미있는 것이 있다. 실제로 중국에서 자사 제품을 카피하고 메뉴얼까지 중국어로 번역해서 판매를 하는 것을 발견하고 오히려 카피를 한 사람을 스카우트 하고 정식 메뉴얼로 사용했는데, 이 사람이 알고보니 박사급 인력이라 제품에 존재하는 수 많은 버그들까지 뜯어고쳤다는 오픈 소스에서나 가능한 얘기들을 예시로 들고 있다.</p>


<p>간만에 굉장히 흥미로운 책이었다. 나는 하드웨어 쪽은 관심을 접은지 오래지만, 그럼에도 하드웨어도 이런 형태의 모험이 가능하다는 점이 가장 흥미로웠고 나도 도전해보고 싶은 생각이 들었다. 생산, 혹은 제조는 사람의 가장 근본적인 욕구 중 하나이다. 글을 쓰는 것도 일종의 Make이고 모든 DIY도 전부 Make이다. 이 책에서는 이러한 Maker들이 마치 소프트웨어가 그러했듯 전체 산업 자체를 바꾸어버릴 것이라고 생각하는데, 그러한 미래가 상당히 기대되고 가능성이 있어보인다는 생각이 들었다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[언어의 정원 - 비가 오면 스쳐가는 아련한 기억]]></title>
    <link href="http://SanghyukChun.github.io/16/"/>
    <updated>2013-08-17T02:00:00+09:00</updated>
    <id>http://SanghyukChun.github.io/16</id>
		<content type="html"><![CDATA[<p><img src="http://cfile76.uf.daum.net/R678x0/236E244A51F23C710277DC" width="300"></p>

<p>초속 5센치미터, 별을 쫓는 아이의 신카이 마코토가 신작을 들고 나왔다. 빛에 대해 집착에 가까울 정도의 묘사와 배경의 효과 등으로 유명한 에니메이션 작가이다. 뭐 사실 이걸 굳이 의식하고 봤던건 아니고, 예고편을 보았을 때 느껴지는 아련한 느낌 그리고 일본 2D 애니메이션에서만 느껴지는 특유의 느낌이 너무 좋아 보고싶었던 영화이다. 국내 개봉은 상당히 최근에 한 것 같은데, 불행히도 상영관이 많지가 않다. 그래서 집에 올라온 김에 보고 내려가기로 결정하고 심야로 보고 왔다.</p>


<h3>비가 오면 스쳐가는 아련한 기억</h3>


<p>&#8216;비가 온다. 비가 오는 날은 하늘이 가까워지는 것 같아서 너무 좋다.&#8217; 영화가 시작을 하면서 주인공이 나지막히 독백을 하는 대사이다. 전반적으로 영화 자체가 비 오는날에 대한 얘기이기 때문에 비오는 풍경을 많이 묘사한다. 영상미나 그 영상미를 끌어올리는 적절한 선곡만으로도 충분히 볼 가치가 있는 영화라고 생각한다. 물론 어디까지나 이런 감성을 좋아하는 사람들에게만 한정되는 얘기일수는 있지만. 말로 하는 것 보다는 예고편에 묘사가 잘 되어있으니 유튜브 링크를 추가한다.</p>


<iframe width="560" height="315" src="http://SanghyukChun.github.io//www.youtube.com/embed/udDIkl6z8X0" frameborder="0" allowfullscreen></iframe>


<p>이 영화는 뭐랄까, 마치 스쳐지나갔지만 어딘가에 남아있는 첫사랑에 대한 아련한 기억같은 느낌의 영화라고 할 수 있다. &#8216;비가 와야지만 만날 수 있는 사람&#8217; 그리고 비록 아주 극적으로 터져오르지는 않지만 처음부터 끝까지 잔잔하게 흘러지나가는 아련한 느낌은 마치 추억하는 그 장소를 지나가면 문득 떠오르는 그런 사랑처럼 은은하게 스며든다. 비가 오면 만날 수 있는 그 사람. 얼마나 아련한가. 보면서 마음이 아픈 장면도 조금 있었고 (하지만 막 미어질듯이 아픈 장면은 아니고 그냥 안쓰러운 정도로 생각하면 된다.) 적절한 감정선을 유지하는 것이 참 좋았다. 만약 이 영화가 애니메이션이 아니라 실사로 촬영이 되었다면 마치 <a href="http://watcha.net/mv/josee-the-tiger-and-the-2003/mmjz01">조제 호랑이 그리고 물고기들</a>과 비슷한 느낌일 것이라는 생각이 든다. 사실 이건 꽤 많은 일본식 러브스토리 영화와 비슷한 구성이고 비슷한 감성이기는 하다. 우리나라처럼 갑작스럽게 터져나오는 그런 느낌이라기보다는 처음부터 끝까지 어떤 묘한 감정을 불러일으킨달까.</p>


<h3>그림에 비하여 다소 모자란 스토리</h3>


<p>이 영화를 보고 불만을 가지는 사람들은 아마 너무 짧은 상영시간 (1시간이 채 안된다) 그리고 무언가 제대로 끝난 것 같지 않은 전개 등이 불만일 것이다. 분명 그 아름다움에 비하면 스토리 측면이 모자라는 것은 사실이다. 하지만 개인적으로는 오히려 딱 이 정도였기에 좋지않았을까라는 생각이 들었다. 쓸데없는 감정선이 삽입되는 것 보다 은은하게 배어나오는 그 감성이 오히려 더 현실적이고 더 와닿았다는 생각이 들었다. 사실 인물간의 대화가 많지도 않다. 하지만 마찬가지로 그렇기에 더 현실적이라는 생각이 들었고 오히려 너무 과하지 않았다는 생각이 들었다. 처음부터 잔잔하게 깔고 들어가는 복선, 정말 갑작스럽게 밝혀지는 이야기들, 갑자기 과감하게 불량 학생들에게 쳐들어가 신나게 얻어터지고는 &#8216;맥주 먹고 전철에 뛰어들었어요&#8217; 같은 농담을 던지는 것은 싱겁게 끝났다기보다는 우리 모두가 아마 그 순간에는 그렇게 말하지 않았을까라는 생각이 든다. 그리고 우리의 감성이 아니라 일본인의 감성으로 만들었기 때문에 그들의 문화가 녹아있고 그들의 생각이 녹아있는 영화이다. 한국적인 영화의 잣대로만 평가하면 부족할 수 밖에 없는 그런 영화가 아닐까라는 생각이 든다.</p>


<h3>애니메이션은 아이들의 것이라는 인식이 너무 싫어</h3>


<p>우리나라에는 애니메이션이라하면 아이들의 것이고 어른들이 보기에는 유치하다고 생각한다. 그렇게 생각하고 애니메이션을 안 보는 것은 상관없지만, 아이들을 위한 것이 아닌데 아이들을 데리고 보러 오는 가족들은 줄어들었으면 좋겠다. 이 영화는 확실히 유아를 대상으로 하는 영화가 아니다. 센과 치히로의 행방불명 등은 아이들이 보기에도 무리가 없고 어른들에게도 잔잔한 메시지를 전해주는데에 반해, 이 영화는 지나치게 아이들에게 불친절하다. 비가 오면 스쳐가는 아련한 기억, 추억 그런 감성들을 어루만져주는 영화이지 아이들과 즐겁게 하하호호 하면서 보는 영화는 아닌데 그런 생각을 하고 온 가족들이 정말 많고, 덕분에 상당히 조용하게 감상하고 싶었던 작품을 감상하는데에 몰입도 좀 힘들었고 옆에서 계속 조잘대는 아이들을 보고 있으니 기본적인 예의가 없는 것이 조금 화가 나기도 하더라. 하지만 이건 이미 우리 사회에 깊게 뿌리박힌 편견이고 덕분에 국내 극장 애니메이션 산업도 전부 죽어버리고 일본으로 떠나 외주를 하고 있는 것이 아닌가라는 생각에 씁쓸하더라. 마찬가지의 시선이 게임, 만화 그리고 전반적인 컨텐츠 산업에 퍼져있는 것도 마음아프다. 우리는 언제쯤 우리의 감성으로 쓰여진 우리의 작품을 만나볼 수 있을까</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[설국열차 - 체제에 대항하는 사람들의 이야기[스포]]]></title>
    <link href="http://SanghyukChun.github.io/15/"/>
    <updated>2013-08-05T01:04:00+09:00</updated>
    <id>http://SanghyukChun.github.io/15</id>
		<content type="html"><![CDATA[<p>인류는 그 태동의 순간에 맞보았던 빙하기를 <a class="red tip" title="지구온난화로 급상승한 지구의 기온을 CW-7이라는 물질을 대기중에 살포하면서 낮출 계획이었는데 너무 많이 낮춰버렸다.">스스로의 손으로 또 다시 맞이하게 되고</a> 모든 생명체가 멸종한 채로 마지막 노아의 방주인 열차만이 세상에 존재한다. 이 열차는 세계를 정확히 1년에 한 바퀴씩 돌면서 돌고 <a class="red tip" title="무한 동력이란 불가능하지만 설정이므로 넘어가자. 그리고 사실 무한 동력도 아니었다">그 동력 역시 거의 무한하여</a> 모든 생명체의 마지막 보루이다. 하지만 이 열차에는 계급이 존재하여 가장 앞머리에 모든 열차를 제어하는 절대자가 군림하고 있고 가장 마지막 꼬리칸에는 무급자, 빈민층이 거주하고 있다. 이 정도가 이 영화의 핵심 세계관이다.</p>


<p>영화를 보고 나서 다양한 감상평들을 읽어봤는데, 개인적으로 흥미로웠던 글을 몇 개 꼽자면 먼저 봉준호 감독의 변태성(..)을 기반으로 작성한 <a href="http://mlbpark.donga.com/mbs/articleV.php?mbsC=bullpen&mbsIdx=2735918&cpage=22&mbsW=search&select=stt&opt=1&keyword" target="new">설국열차 19금 강상</a> 그리고 열차와 인류의 역사를 연결지어 설명한 <a href="http://blog.naver.com/aciiacpark/100193144054" target="new">한 블로그 포스팅</a> 등이 있다. 그 밖에 결국 백인이 이룩한 열차와 역사는 멸망하고 흑인과 동양인이 최후의 아담과 이브가 되었다는 해석이라거나 월가로 대표되는 신자유주의식 새로운 계급사회에 대한 비판이라고 바라보는 사람들도 있다.</p>


<p>1차적으로 나에게 이 영화는 한국인이 만들었고 한국인이 나온 디스토피아물이다. 상당히 고전적으로 쓰이는 빙하기로 인한 인류 멸망, 그리고 그 멸망의 특성상 인류는 자유롭지 못하고 어떤 공간에 갖혀서 그 내부에서 일어나는 일들. 브이포반덴타, 이퀼리브리엄 등의 단순히 독재자나 체제의 붕괴를 통해 그 좌절을 극복할 수 있는 것이 아니라 지금 상황을 유지하기 위하여 그 독재자, 체제가 유지되어야하고 결국 그 독재자를 마주하게 된 젊은 혁명가도 현실을 마주하고 절망하게 되는 그런 스토리. 사실 그래서 천재지변이나 핵전쟁, Y2K등 인류가 제어할 수 없는 재앙으로 인해 초래된 포스트 아포칼립스물들은 더 좌절스럽고 더 절망스럽다. 인류의 가장 추악한 본성이 드러나고 그 이유가 자신의 사리사욕을 채우는 것이 아니라 정말 생존의 문제에서 비롯된 것이기 때문. 그리고 설국열차는 그러한 상황에서 억지스러운 상황일지라도 자신만의 절망스러운 세계관을 잘 구축하고 유지해나가고 있는 자기모순에 빠지지 않기 위하여 많은 요소들이 장치되어있는 그런 디스토피아물일 뿐이다.</p>


<p></p>

<p>일반적으로 인류의 멸망을 그리는 포스트 아포칼립스물, 특히 그 중에서도 체제적인 문제가 동반되는 스토리를 가지고 있는 영화들은 공통적으로 전달하고자하는 메시지가 꽤나 뚜렷한 편이다. 하지만 사실 설국열차는 이 영화를 통해 어떤 이야기를 하고 싶었던 것일까를 유추하는 것이 꽤 어려운 편이다. 어떤 사람들은 그래서 예술영화라고 얘기하기도 하는데, 그 얘기도 어느 정도는 맞는 얘기가 아닐까 싶다. 다만 내가 느낀 설국열차에 대해 간략하게 말을 해보자면 &#8216;체제의 붕괴&#8217; 그 자체에 대해서 얘기하고자 했던 것이 아닐까 생각된다.</p>


<p>열차가 인류의 역사를 대변하거나 혹은 여성과 남성 간의 성관계를 묘사한 것이거나, 전부 흥미로운 해석이고 꽤 재미있게 읽은 부분이지만, 내가 생각했을 때 이 열차 자체는 어떤 특정한 무언가를 지칭하는 것이 아니라 &#8216;체제&#8217; 그 자체를 얘기하는 것이 아닐까싶다. 결국 커티스가 그렇게 부당하다고 느끼면서 앞으로 뛰어갔던 이유는 꼬리칸에서 받고 있는 부당한 대우들과 더 이상 남아있을 것도 없을 정도로 모든 것을 앗아가는 폭력적인 억압 그 자체에 대항하고 그 체제를 붕괴시키기 위함이었다. 결국 윌포드를 죽이고 열차를 차지하여 이런 부당한 대우를 없애야한다가 그의 생각이 아니었을까. 이는 자발적으로 체제상에서 억압받던 저계급의 사람들이 자신들의 이권과 주권을 지키기 위하여 들고 일어난 일종의 혁명이다. 혁명의 첫 날 혁명군의 물을 차지하게 된다. 그리고 길리엄은 여기까지만 차지하고 더 이상 전진하지 말자고 권유한다. 이는 아마도 자신의 삶에서 가장 기초적인 것들을 억압받던 사람들이 그 기본적인 욕구를 해결하고, <a class="red tip" title="인구도 줄었고 공간도 늘어났으므로">더 넓은 공간</a> <a class="red tip" title="비록 바퀴양갱이지만...">식량과 물의 안정적인 공급</a>을 차지하고 그 상태에서 만족하여 더 이상의 체제의 변혁이 아니라 이 체제상에서 본인들이 누릴 수 있는 권리를 확대하는 사람들을 얘기하는 것이 아닐까.</p>


<p>하지만 커티스는 앞으로 전진한다. 부조리한 자가 우리를 다스린다면 결국에 우리는 언젠가 다시 진압되고 말 것이다 라는 논리다. 이는 이 체제를 지배하고 이 체제 자체가 문제가 있기 때문에 이를 전복해야한다고 주장하는 급진적인 주장을 대변하는 것이 아닐까 싶다. 그렇기 때문에 만족하고 안주하는 대다수의 사람들과는 다르게 일부 특공대를 조직하여 윌포드를 끝장낼 생각을 하고 있다.</p>


<p>하지만 이 영화에서 진짜 주인공은 다름아닌 <a class="red tip" title="배우 송강호">남궁민수</a> 그리고 <a class="red tip" title="배우 고아성">남궁요나</a>이다. 꼬리층 사람들이 끝까지 이 열차의 체제를 붕괴시키고 열차 안에서의 변화와 혁명을 꿈꾸고 있었다면 남궁민수는 이 열차 자체에서 나가고 싶어한다. 처음부터 이 부녀는 꼬리칸에 속한 사람인지 아니면 앞칸에 속한 사람인지 언급조차 없다. 아마 윌포드의 문 앞에서 얘기하는 내용을 바탕으로 유추해보면 앞 칸이 아닐까라는 생각이고, 거기다가 자그마치 보안 설계자 정도의 중요한 사람을 뒤에 버려두었을 것 같지는 않다만.. 직접적으로 언급은 되지 않는다. 즉 제 3의 세력이라는 의미이다. 쉽게 생각하면 윌포드는 한 국가의 왕, 귀족이고 커티스가 평민, 서민을 의미한다면 남궁민수는 아예 그 국가에 속하지 않은 제 3의 국가거나 세력인 셈이다. 그 체제 내부에서 살아가는 사람들은 그 틀에 얽매이게 되지만 처음부터 그 체제에 속하지 않은 사람은 더 많은 것을 볼 수있는 법이다.</p>


<p>처음으로 창문을 통해 바깥 세상을 살펴보던 꼬리칸 사람들이 본 것은 여전히 얼어있고 여전히 죽어있는 바깥세상이었다. 하지만 남궁민수가 본 것은 자그마한 변화들. 자그마치 10년에 걸쳐 비행기의 꼬리 부분이 드러나는 것을 지켜보면서 눈이 녹고 있다는 것을 깨닫는 것. 그리고 이누이트족 부인이 있었기 때문에 중간에 나오는 총격전에서 눈송이를 일부러 CG처리까지 해가면서 보여준 이유 역시 <a class="red tip" title="실제 이누이트 족은 눈의 색깔과 눈 결정을 보고 온도를 구별한다. 그런 의도가 아니고서야 그런 수준의 CG를 그렇게 길게 넣을 이유가 없다.">그 눈송이를 통해 눈 결정이 형성된 곳의 온도를 유추했을 것이다</a>. 결정적으로 식물칸에서 무언가를 발견하고 확신을 하게 된다. 작중에는 그것이 어떠한 것인지 언급되지 않는다. 마지막에 나온 북극곰일 수도 있지 않을까라는 얘기도 있고 <a class="red tip" title="커티스에게 굳이 이 얘기까지 할 필요도 없지 라고 하는 것으로 보아 일반적인 것이 아닐 것이라는 추측도 상당히 신빙성 있다.">무언가 이누이트족이나 아니면 그 만이 알 수 있는 무언가가 아닐까</a>생각이 든다. 어쨌거나 그 만은 남들이 보려하지 않는 것들을 보고 그 안에서 가능성과 희망을 찾는다.</p>


<p>그리고 이 혁명은 처음부터 끝까지 역설과 모순으로 일관되어있다. 작중에 등장하는 크로놀이라는 약이 있다. 이런 형태의 마약은 사람들을 영원히 절망 속에 지내야 하는 사람들을 취하게 만들어 무료하고 갇힌 일상을 벗어나게 하는 디스토피아에 등장하는 전형적인 퇴폐와 향략을 대변하는 요소이지만 역설적이게도 이 체제를 유지하고 이 체제에서 양산된 내부를 좀먹게 하는 요소들이 모여 열차를 멈추고 바깥으로 나가게 하는 열쇠가 된다. 그것보다도 더 역설적인 사실은 사실 문을 만든 사람이 남궁민수 본인이라는 사실. 본인이 만든 문을 본인이 뚫고 지나가면서 그는 이 세상의 창조주이자 동시에 파괴자이다. 하지만 창조와 파괴는 결코 독립적이지 않다. 파괴없이 창조가 일어날 수 없고 창조없이 파괴가 일어날 수 없다. 그 사실을 알고 있기 때문에 힌두교에도 브라마, 비뉴슈, 시바로 대변되는 창조 균형 파괴의 신이 존재하는 것이다. 그는 이 세상을 창조한 창조자이지만 동시에 파괴자이다. 열차안의 세상은 엔진이 아니라 문으로 이루어져 있다. 엔진은 세상을 움직이게 하는 요소이지만 이 세상 자체는 문으로 격리되고 문으로 구성되고 그리고 주인공들 역시 문을 넘어가려 노력을 한다. 결국 본인의 체제를 본인이 무너뜨리는 셈이다.</p>


<p>하고 싶은 얘기는 정말 많다 이를테면 횃불의 상징성, <a class="red tip" title="난 사실 문자 그대로 아이들을 '연료'로 사용할 줄 알았는데 다행히도 그 유기체가 아니라 노동력이 원료였다.">어린 아이를 동력원으로 삼으며 나아가는 자기 모순적인 체제에 대한 지적</a>, 아래에서 위로 올라간 커티스 위에서 아래로 내려온 경비대장의 대칭성과 폭력성, 자신의 팔을 내어준 길리엄과 그렇지 못했던 커티스, 식인을 일삼던 꼬리칸에서 일어난 아비규환 등.. 하지만 너무 길어지면 좀 그러니깐 마지막으로 인상깊었던 것 하나만 언급하고 끝낼까 한다. 이 세상은 백인이 창조했다. 그래 방금 위에서 남궁민수가 창조했다고는 하지만 상징적인 의미에서 그들이 &#8216;나아가는 세상&#8217;과 그들이 &#8216;살고있는 세상&#8217;은 엄연히 다르다. 그 세상은 열차 그 자체이다. 그 열차는 윌포드에 의해서 만들어졌고, 동조자인 길리엄, 그리고 혁명을 주도하며 나아가는 커티스 모두 백인이다. 그들은 모두 이 &#8216;열차&#8217;안에서의 상황에만 관심이 있다. 그런데 정말 너무나 아이러닉하게도 그 세상을 창조하고 살아갔던 것은 백인이지만 결국 그 체제를 부셔버리고 살아남은 것은 동양인과 흑인이었다. 어떤 인종적인 메시지라기 보다는 결국 그 체제에서 순응한 사람들은 그 체제가 무너지고 나면 결국 자멸하고 쓰러지고 만다는 것을 보여주는 것이 아닐까 결국 살아남고 그 다음을 이어나가는 사람들은 그 사람들이 아니라 처음부터 다른 사람들이었던거지.</p>


<p>오랫만에 영화관련해서 긴 글을 써본 것 같다. 꽤나 말이 많은 작품이고 여러 해석들이 쏟아져나오는 상황인데 그 해석들이 전부 다 하고 싶은 말이 다르다는 것이 흥미롭다. 한국영화로는 최고 예산이지만 헐리웃에서는 저예산 디스토피아영화라는 사실에서 외국에서도 (그 가격에 기대할 수 있는 것에 비해) 호평이 이어지고 있는 실정이고 국내 기록도 갈아치우고 있고하니 꽤 많은 사람들이 볼 것 같지만 역시 사람들이 많이 보는 한국영화의 요소를 몇 가지 가지고 있지 않다는 것이 조금 불안 요소일 것 같다. (흥행의 측면에서) 아무쪼록 한국 영화계 입장에서는 꽤 큰 도전이었으니 성공적인 결말로 끝났으면 좋겠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Week2 - Linear Regression]]></title>
    <link href="http://SanghyukChun.github.io/14/"/>
    <updated>2013-08-04T15:19:00+09:00</updated>
    <id>http://SanghyukChun.github.io/14</id>
		<content type="html"><![CDATA[<p>Coursera강의를 들은지 한참이 지난 줄 알았는데 고작 1주일 밖에 되지 않았다. 아무튼 까먹기 전에 <a href="http://SanghyukChun.github.io/3" target="new">처음 얘기했던대로</a> 하나하나 차근차근 블로그에 정리를 해볼까 한다.</p>


<h3>Linear Regression</h3>


<p><a href="http://SanghyukChun.github.io/3">지난 Post</a>에서는 간단하게 supervise learning과 unsupervise learning에 대해서 언급했다. 이제 supervise learning 중 linear regression에 대해서 얘기를 해보자. 개인적으로는 regression을 하기 이전에 baysian을 설명하는 것을 선호하지만, 그건 그냥 다음 포스트에 설명하기로 하고 (Andrew Ng 교수는 Coursera강의에서 Baysian을 따로 수업으로 다루지 않았다.) 먼저 regression부터 살펴보자.</p>


<p>Linear regression을 가장 간단하게 설명하자면 Excel의 추세선과 거의 비슷한 개념이라고 생각하면 된다. 즉, 지금 내가 가지고 있는 데이터셋이 어떤 <strong>Linear function</strong>인지를 유추하는 것이다. 간단한 예시를 보자. 아래 그래프를 공부시간과 시험성적의 그래프라고 생각해보자. (가로축을 공부 시간 세로축을 시험성적)</p>


<p><img src="http://SanghyukChun.github.io/images/post/14-1.png" width="400"></p>

<p>이 그래프는 대체로 1차 함수(linear function)의 꼴을 가지고 있다는 것을 알 수 있다. 그렇다면 아마도 4.5의 공부 시간을 투자한 학생은 약 4.5 정도의 시험성적을 받을 것이라고 예측할 수 있지 않을까?</p>


<p>물론 현실에서 공부 시간과 성적이 선형 비례하지는 않지만, 아무튼 이런 예시를 통해서 우리는 이 System이 가지고 있는 일종의 특성을 예측할 수 있다. 이때 우리가 &#8216;데이터가 x일 때 y의 결과가 나올 것이다&#8217; 라고 예측한 둘 사이의 관계 혹은 함수를 hypothesis라 한다. 이 부분은 지난 포스트에서 설명한 부분이니 자세한 설명은 넘어가도록 하겠다. 그렇다면 특정 데이터셋이 들어왔을 때 hypothesis는 어떻게 도출할 수 있을까? 아래 그래프를 보자</p>


<p><img src="http://SanghyukChun.github.io/images/post/14-2.png" width="400"></p>

<p>빨간 선과 초록 선 중 어느 hypothesis가 더 좋다고 할 수 있을까? 사람이 선택하는 것은 언제나 부정확하다. 때문에 우리는 수식적으로, 정확하게 scoring할 수 있는 무언가를 원하는데 그 이유로 우리는 <a class="red tip" title="Cost Function이라고도 한다. 본 블로그는 전부 Loss Function으로 칭한다.">Loss Function</a>을 필요로 한다.</p>


<h3>Loss Function</h3>


<p>이 hypothesis가 좋은 hypothesis인지 아닌지 어떻게 알 수 있을까? 사실 답은 간단하다. &#8216;새로운 데이터의 결과를 얼마나 잘 예측을 하느냐&#8217;. 하지만 새로운 데이터가 없이는 Scoring이 불가능하다. (온전히 불가능한 것은 아니고 model selection을 통해 validation을 하는 skill이 있다. 하지만 지금 포스트의 주제는 아니기 때문에 나중에 설명하도록 하겠다.) 때문에 지금 존재하고 있는 데이터에서 찾은 패턴이 전체 패턴과 동일하다는 가정하에 지금 데이터에 얼마나 잘 fit하느냐로 Scoring을 하는 것이 가능할 것이다. 즉, 새로운 데이터를 이용하여 Scoring을 해야하지만, 새로운 데이터를 받기 이전에 Scoring을 하고 그 hypothesis를 사용해야하기 때문에 지금 가지고 있는 dataset이 향후 새로 들어올 데이터와 유사하다고 생각하고 지금 가지고 있는 값을 이용해 fitting을 하는 것이다.</p>


<p>이때 사용하는 것이 바로 Loss function이다. Hypothesis의 Loss를 측정하여 그 값을 최소화 하는 것이다. Loss 혹은 Cost라는 이름에서 유추할 수 있듯 이 값은 function으로 예측된 (predicted) 값과 측정된 (observed) 값의 차이를 사용하여 계산한 값이다. 여러가지 Loss function의 꼴이 있는데, 가장 간단하게 사용할 수 있는 function은 (data_p - data_o)^2이다. data_p는 이 hypothesis를 사용하여 예측한 값이고 data_o는 실제 관측 결과 얻은 값이다. 그 밖에 0-1 Loss라고 해서 값이 정확하게 일치하면 0, 아니라면 1 만큼의 Loss를 가지는 매우 Strict한 Loss function이다. 이후에 설명하게 될 classfication에서 간혹 쓰인다.</p>


<h3>Gradient Descent</h3>


<p>이제 이 Loss function이 가장 작은 값을 가지는 hypothesis를 선택하면 된다. 그렇다면 그 값은 어떻게 찾을 것인가? 여러가지 방법이 있지만, 일반적으로는 Gradient Desent라는 방법을 사용한다. Gradient descent란 쉽게 생각하면 긿을 잃은 상태에서 산을 내려가는 방법이라고 생각하면 된다. 산을 가장 빠르게 내려가기 위해서는 아마 현재 내가 서있는 지점에서 가장 경사가 가파른 지점을 향해서 내려가고, 움직인 위치에서 다시 한번 경사가 가장 가파른 지점을 향해서 내려가고.. 이 과정을 반복하다보면 언젠가 가장 낮은 지점으로 이동할 수 있을 것이다. 이제 이 개념을 머리에 넣어두고 아래 그림을 보자.</p>


<p><img src="http://www.mathworks.com/matlabcentral/fx_files/27631/1/fff.png"></p>

<p><small>출처: http://www.mathworks.com/matlabcentral/fx_files/27631/1/fff.png</small></p>


<p>위의 그림에서 볼 수 있듯 가장 경사가 가파른 지점을 따라 내려 걸어가다보면 가장 낮은 지점으로 도달할 수 있을 것이다. 그런데 여기에서 문제가 하나 발생한다. 만약에 Initial Condition이 작은 봉우리가 아니라 반대쪽 높은 봉우리였다면? 그렇다면 우리는 아마 Global minimum, 즉 전체에서 가장 낮은 지점이 아닌 Local minimum, 즉 주변에서 가장 낮은 지점으로 이동하게 될 것이다. 전체에서 가장 작은 값과 그 주변에서 가장 작은 값을 선택하는 것은 분명 큰 차이가 있다. 하지만 이런 단점에도 불구하고 gradient descent는 매우 많이 쓰이는 방법 중 하나이다. 그 이유는 (1) 구현이 쉽고, (2) 모든 차원 및 공간으로 확대가 가능하다 라는 이유가 있다. Gradient descent는 또한 내가 속도를 조절할 수 있다. 산을 내려갈 때 얼마나 움직인 다음 방향을 바꿀 것인가에 따라 수렴 속도가 급격하게 변한다. 너무 그 폭이 작으면 시간이 너무 오래걸리고, 폭이 너무 크면 최악의 경우에 한 지점에 수렴하지 못할 수도 있다. 그 뿐 아니라 <a class="red tip" title="가장 간단한 예로 y=x만 생각해봐도 절대 수렴하지 않는다.">경우에 따라서는 gradient descent가 끝이 나지 않을 수도 있다.</a> 하지만 여러 방법으로 그 단점들을 보완할 수 있고 무엇보다 아래 코드에서도 확인할 수 있듯 구현이 너무 간단하기 때문에 상당히 많이 쓰이는 방법이다. 더 자세한 것은 <a href="http://en.wikipedia.org/wiki/Gradient_descent">Wikipedia page</a>를 참고하면 좋은 정보가 많다.</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'># From calculation, we expect that the local minimum occurs at x=9/4
</span><span class='line'> 
</span><span class='line'>x_old = 0
</span><span class='line'>x_new = 6 # The algorithm starts at x=6
</span><span class='line'>eps = 0.01 # step size
</span><span class='line'>precision = 0.00001
</span><span class='line'> 
</span><span class='line'>def f_prime(x):
</span><span class='line'>    return 4 * x**3 - 9 * x**2
</span><span class='line'> 
</span><span class='line'>while abs(x_new - x_old) &gt; precision:
</span><span class='line'>    x_old = x_new
</span><span class='line'>    x_new = x_old - eps * f_prime(x_old)
</span><span class='line'>print "Local minimum occurs at ", x_new</span></code></pre></td></tr></table></div></figure>


<p><small>출처: http://en.wikipedia.org/wiki/Gradient_descent#A_computational_example</small></p>


<h3>Overfitting</h3>


<p>이제 적절한 hypothesis를 찾기 위하여 loss function의 최소점을 gradient descent로 찾을 수 있다. 이제 더 이상 우리가 고민할 것은 없어보인다. 아니, 사실 그렇지 않다. 앞서 가정한 바에 의하면, 우리는 지금 존재하는 데이터셋이 전체 데이터셋의 분포를 대변한다고 가정했다. 하지만 꼭 그러리라는 보장을 할 수 있을까? 당연히 없다. 우리가 보고 있는 자료가 엄청 큰 패턴 중에서 매우 일부의 예외일 수도 있고, 혹은 노이즈 때문에, 너무 샘플 수가 적어서 잘못된 방향으로 pattern을 찾게 될 수도 있다. 이런 경우를 일컬어 Overfitting이라고 한다. 즉, 기존의 데이터에만 너무 충실해서 새로운 데이터가 들어왔을 때 도저히 써먹을 수가 없는 상태를 일컬어 Overfitting이라 한다. 이 것을 해결하기 위하여 여러가지 방법이 있는데 Model Selection과 Regularization이 그것이다. 이에 대해서는 다음 포스트에서 다루고자 한다.</p>


<p></p>

<p>Linear Regression은 매우 간단한 supervise learning의 예시이지만 상당히 중요한 개념들에 대해서 많이 다뤄야 한다. 특히 Loss function은 정말 중요하고 그 Loss function을 계산하는 gradient descent도 너무 중요하고, 마지막에 잠시 언급한 Overfitting은 너무 중요하다 못해 머리가 아플 정도다. 아직 정말 중요한 부분들을 일부 설명 못했지만 Overfitting에서 할 얘기가 너무 많아서 이쯤에서 줄여야겠다.</p>


<hr>


<h4>참고도서</h4>


<p>Bishop, Pattern Recognition and Machine Learning</p>


<p>Simon Rogers, A First Course in Machine Learning</p>


<p></p>

<p>Stephen Marsland, Machine Learning: An Algorithmic Perspective</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.8.1]]></title>
    <link href="http://SanghyukChun.github.io/13/"/>
    <updated>2013-08-01T19:51:00+09:00</updated>
    <id>http://SanghyukChun.github.io/13</id>
		<content type="html"><![CDATA[<p>&#8220;마음이 콩밭에 가있다.&#8221; 근래에 자주 듣는 표현 중 하나이다. 내가 그 얘기를 듣는 대상은 아니라는점이 아직은 다행이지만. 아무튼 오늘은 하루 종일 마음이 콩밭, 정확히는 자취에 마음이 가버려서 집중을 하기 너무 힘들었다. 여러모로 집중하기에는 최악의 조건들만 잔뜩있는 기분이라 일과시간에도 그 이후에도 집중력있게 집중력을 유지하면서 무언가를 한다는 것이 정말 어렵게 느껴진다. 해야하는 일은 정말정말 많은데 나는 그 일 중 얼마나 많은 일을 해내고 있는 것일까</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.7.31]]></title>
    <link href="http://SanghyukChun.github.io/12/"/>
    <updated>2013-07-31T17:02:00+09:00</updated>
    <id>http://SanghyukChun.github.io/12</id>
		<content type="html"><![CDATA[<p>나를 괴롭히던 문제의 원인을 알아냈다. 알 수 없는 이유로 컴퓨터의 파티션이 바뀌어서 sda가 아니라 sdb에 root가 mount되어 있었다. 뭐 이유는 도저히 이해가 안가지만 지금이라도 알아내서 다행이라는 생각이 든다.</p>


<p>내가 뭔가 contribution을 할 수 있는 일을 해야겠다는 생각이 많이 든다. 지금 하는 일은 내가 과연 얼마나 contribution을 할 수 있을지 솔직히 자신이 없다.. 어제 했던 대화들을 생각해보면 나는 이 곳에서 행복하게 지낼 수 없을 것 같다는 그런 생각이 든다. 하지만 일단은 내가 해야할 일에 집중하는 것이 우선이므로 그런 고민들은 잠시 잊고 있어야지. 이제 내일이면 벌써 8월이라는 사실을 잊으면 안된다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.07.30]]></title>
    <link href="http://SanghyukChun.github.io/11/"/>
    <updated>2013-07-30T19:47:00+09:00</updated>
    <id>http://SanghyukChun.github.io/11</id>
		<content type="html"><![CDATA[<p>어제 설정 스크립트를 변경했다가 거의 반나절을 소모했다. 내가 만든 시스템이 아니라면 가급적 건드리지 말아야한다는 사실을 깜빡하고 너무나 과감하게 내가 잘 알지도 못하는 시스템레벨을 변경해버린 것이 화근이었다. 다른 작업을 먼저 끝내고 오늘 다시 살펴보니, 코드 문제는 역시 아니었고 내가 바꾼 스크립트 때문인지 아닌지는 몰라도 하드가 잘못 잡혀있었다. 지금 프로그램은 하드 24개를 설정하는 스크립트가 있는데 이유는 알 수 없지만 sda와 sdb가 바뀌어있어 (라고 추정하고 있어) sdb1에 설정이 잡혀 용량이 부족해 에러가 난 것이었다. 이해할 수 없는 것은 도대체 어째서 sda에 있던 파티션이 sdb가 되었냐는 점. 납득은 안되지만 어쨌든 원인은 알았으니 고치면 된다. 하지만 내가 고치지 말고 왜 이런 이유가 났는지 보고만 해도 충분하겠지.</p>


<p>요즘 무기력하고 우울하다. 내가 도대체 왜 이걸 하고 있고 도대체 뭘 하고 있는건지 모르겠다. 내가 하려는 것은 다른 일인데 이 곳에서 이러고 있는 것이 과연 나를 위한 일인가? 난 잘 모르겠다. 그리고 내가 하려는 일도 과연 나에게 잘 맞는 일일 것이라고 자신할 수 있을까? 역시 잘 모르겠다. 혼란스럽기만 하다. 하지만 페르시아의 왕자를 만든 조던 마크너도 모든 성공을 가진 것처럼 보이는 순간에도 계속 고민하고 힘들어했다. 모두 다 자연스러운 일이겠지.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andrew Ng 교수의 Machine Learning강의 수강 완료]]></title>
    <link href="http://SanghyukChun.github.io/10/"/>
    <updated>2013-07-29T08:11:00+09:00</updated>
    <id>http://SanghyukChun.github.io/10</id>
		<content type="html"><![CDATA[<p>기어코 주말만에 Coursera하나를 끝냈다. 물론 어디까지나 다 아는 내용이었고 강의 난이도도 낮아서 빠르게 스킵하면서 넘어갔기 때문에 가능했던 일이지만.</p>


<p>이 강의를 들으면서 요약을 하면서 천천히 진행하려고 했는데 생각보다 강의 내용도 쉽고 다루는 내용도 상당히 기초적인 것들이 많아서 차라리 빠르게 훑고 뒷 쪽의 Advanced를 보면서 다시 개념 다지는게 좋겠다는 생각으로 질주했으나, 끝까지 난이도가 쉬웠다. 악의가 있는 말은 아니고, 정말 설명도 잘하고 예시도 쉬운 것들이라 금방금방 넘어갈 수 있었다. 결국 19.6시간짜리 강의를 이틀 + 반나절만에 돌파하는 기염을 토하게 되었다 ;;</p>


<p>근데 아무래도 아는 내용들이 주가 되다보니 그냥 비디오를 스킵하면서 강의 하나보는데 5분도 안걸리는 식으로 훑으면서 봤더니 온전하게 소화가 되지 않은 기분이다. 전공서 다시 읽으면서 개념 정리하고 강의 순서대로 나름대로 정리하면서 포스팅을 해봐야겠다. 아쉬운 점이라면 너무 수학적인 내용이 없다보니 (Baysian조차 나오지 않은 것은 나름 신선한 충격이었다.) 아마 내가 공부하는 내용을 바탕으로 정리하면 꽤나 안드로메다로 갈 것 같은 기분이 허허허</p>


<p>Hinton 교수의 Neural Network강의는 다음주쯤부터 시작하고 그 전에는 전공서를 다시 읽어봐야겠다. 한 학기동안 배운 것도 정리하겸. 사실 우리 교수님 강의 순서가 책이랑 달라서 책 공부에 소홀해진 것도 있으니.. 이번 주에는 조금 여유가 있을 듯 하니 이럴 때 좀 열심히 해놔야겠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.07.28]]></title>
    <link href="http://SanghyukChun.github.io/9/"/>
    <updated>2013-07-29T04:20:00+09:00</updated>
    <id>http://SanghyukChun.github.io/9</id>
		<content type="html"><![CDATA[<p>주말이라고 열심히 자기만 하다가 갑자기 막판에 조금 꽂혀서 코딩을 조금 했다. About Me 프로젝트 코딩을 좀 했는데, 개인적으로 github pages를 헤메는 바람에 branch가 살짝 꼬인게 아쉽다. 크게 신경 쓸 부분은 아니지만. 일단 그제 나온 Bootstrap 3을 추가 적용시키고 소소한 markup수정, 내부 컨텐츠 수정을 좀 했다. About Me는 급하게 만든 프로젝트라고는 믿기지 않을 정도로 더 크게 손 댈 것이 없다. 물론 아예 없는 것은 아니지만 그래도 이 상태에서 굳이 Markup을 뜯어고친다거나 css를 크게 고친다거나 (물론 오늘은 bootstrap을 붙이긴 했지만) 성능이 아주 크게 추가되거나 (역시 오늘 bootstrap carousel을 추가시켰지만) 할 건 없는 것 같다. 다만 문제는 컨텐츠인데, 솔직히 내용을 채우기에는 내가 쌓아온 것들이 너무 적어서 뭔가 적을게 많이 없다는 점이 안타깝다. Works를 만들 때 가장 그런 생각을 많이 했는데, 그냥 열심히 하는 것 밖에 답이 없는 것 같다.</p>


<p>블로그는 조만간 더 뜯어고칠거다. 지금은 그래도 대충 모양새는 잡아놨으니 더 세세한 부분을 건드리지는 않을거지만.. 일단 facebook plugin을 붙이는 순간 머리가 지끈지끈해진다. 한번 완성만 시키면 크게 손 댈 필요없다는 장점이 있다고는 하지만 그래도 귀찮은걸 어떻게 해 ㅎㅎ.. 블로그는 대충 래퍼런스 잡고 어떻게 해야할지 감은 잡았으니 시간날 때마다 틈틈히 고치면 될 것 같다.</p>


<p></p>

<p>머신러닝 공부는 역시 느리다. 아는 부분이라고 대충대충 넘어가고 결국 머리에도 많이 남지 않는 것 같아서 안타깝다. 조만간 Matlab으로 코딩을 시작해야겠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.07.27]]></title>
    <link href="http://SanghyukChun.github.io/8/"/>
    <updated>2013-07-28T02:36:00+09:00</updated>
    <id>http://SanghyukChun.github.io/8</id>
		<content type="html"><![CDATA[<p>저번 주에는 <a href="http://sanghyukchun.github.io/aboutMe/">AboutMe</a>에 매진하고 이번 주말에는 내내 블로그를 작업하는 데에 몰두한 것 같다. -프로그래밍은 재미있는 것이다.- 라는 말은 어디까지나 내가 감당할 수 있고 내가 어떻게 할 수 있을지 가늠할 수 있을 때 어울리는 말이 아닐까. 앞으로 내가 나아갈 방향에서 그렇지 않은 프로그래밍이 참 많을텐데 내가 계속 프로그래밍을 하는 것이 맞을까라는 생각이 든다.</p>


<p>Octopress로 블로그를 만든 것을 살짝 후회하고 있다. 편하게 고치려고 가져온건데 오히려 바닥부터 뜯어고쳐야하는게 많다보니 차라리 처음부터 지킬로 작업하는 것 보다 느린 것 같다. 하지만 일단 커스터마이징만 끝나면 deploy, preview 심지어 new post까지 전부 스크립트로 걸어놨으니 오히려 더 빠르게 진행될 수 있겠지</p>


<p>머신러닝 공부 속도는 더디지만 (오늘은 7강까지 밖에 못들었다.) 그래도 얼른 끝내야 내 프로젝트를 진행하고 neural network 강의 등으로 넘어가서 내 자신에 대한 발전이 있을 텐데 자꾸 더디다. 아직까지는 전부 아는 내용이라 사실 정말 빠르게 다 보고 슥슥 넘겨도 괜찮은 정도인데 그 잠깐을 집중하는 것도 못하고 있어서 큰일이다. 하지만 머신러닝 강의가 더딘만큼 블로그와 About Me의 개발 속도는 어마어마한 것을 보면 확실히 이 세상에 모든 것은 trade-off관계인가 보다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress에 facebook comments 추가하기]]></title>
    <link href="http://SanghyukChun.github.io/7/"/>
    <updated>2013-07-28T01:38:00+09:00</updated>
    <id>http://SanghyukChun.github.io/7</id>
		<content type="html"><![CDATA[<p>원래는 바로 레이아웃 뜯어고친 얘기를 적을 생각이었지만 페북 코멘트로 삽질을 하고나니 이것 부터 기록하는 편이 더 나을 것 같다.. 일단 당연히 Octopress는 정적 html 페이지이니 Octopress자체가 comment를 관리하는 것은 불가능하다. 때문에 iframe으로 만들어진 social plugin이 필요한 것이고.. 사실 Disqus를 사용하면 세팅도 할 필요없이 간단하게 처리가 가능하다. 하지만 Disqus는 여러 단점이 존재하고, 무엇보다 내가 쓸 줄 모른다 -_-; 그리고 한국에서 쓰는 걸 본 적이 없음. 차라리 페북이나 트위터 댓글을 만드는 편이 훨씬 나을 것 같아서 개발 경험이 있는 페이스북 댓글로 가기로 했다.</p>


<p>페이스북 댓글을 만들기 위해서는 먼저 app id가 필요하다. 자신의 <a href="https://developers.facebook.com/apps">App관리 페이지</a>에서 앱을 추가하고 app id만 받아오면 된다. 이 id가 있어야 페이스북 자바스크립트 API를 사용 가능하기 때문에 꼭 만들어줘야한다. (즉, 앱 이름을 제외한 나머지 옵션은 건드릴 필요가 없다)</p>


<p>원래 <a href="https://developers.facebook.com/docs/reference/plugins/comments/">facebook document</a>에서 <a class="tip" title="facebook comment에서 설정할 수 있는 값은 크기와 light, dark뿐">자동 생성한 코드</a>를 이용했기 때문에 id를 전부 하드코딩했었는데 <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">좋은 포스트</a>를 발견해서 새로운 좋은 방법을 알아냈다. 일단 받아온 앱 id를 _config.yml에 추가하자.</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>facebook_app_id = 12341234</span></code></pre></td></tr></table></div></figure>


<p><a href="https://developers.facebook.com/docs/reference/plugins/comments/">위에서 링크한 document</a>를 보면 알 수 있겠지만, body에서 script를 사용하여 API를 사용할 수 있도록 만들어주는 코드가 필요하고, 실제 코멘트를 추가할 위치에 fb_comments라는 div를 생성해야한다. 이게 사실 짱짱 귀찮은데 이유는 Comment를 추가해야하는 곳이 page랑 post 두개이기 때문 -_-; 거기다가 나는 이상하게 조건문이 잘 안먹어서 열이 뻗쳐서 그냥 if문도 날려버렸다. 내 코딩의 문제겠지만 오랫만에 레일즈 스타일로 html고치려니깐 뭔가 답답해서..</p>


<p>아무튼 그렇게 하고나서 <code>source/_include/post/facebook_comment.html</code>이라는 녀석을 만들어서 아래의 코드를 추가해주자</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>&lt;div class="fb-comments" data-href="http://SanghyukChun.github.io/7/" data-width="470" data-num-posts="10"&gt;&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>옵션은 본인이 원하는 대로 고쳐도 된다. 이제 <code>source/_layout/page.html</code>과 <code>source/_layout/post.html</code>을 수정하자</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>&#123;&#37; if site.facebook_app_id &#37;&#125;
</span><span class='line'>  &lt;section&gt;
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'>    &lt;div id="facebook_comments" aria-live="polite"&gt;
</span><span class='line'>      &#123&#37 include post/facebook_comment.html &#37;&#125;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>&#123;&#37; endif &#37;&#125;</span></code></pre></td></tr></table></div></figure>


<p>자 이걸로 끝이다. <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">아까 링크했던 글</a>에서는 head에 meta를 추가해주는데 해도 좋고, 없어도 잘 돌아는간다.</p>


<p></p>

<h6>생길 수 있는 문제들</h6>


<ul>
    <li>나처럼 옵션 잘못 걸어서 아예 Comment section자체가 안생김</li>
    <li>data-href에 http:// 없는 상태로 테스트함 (위와 같이해서 preview 때리면 잘 되야한다)</li>
    <li>app id나 등등에서 오타가 있음 (그런데 은근 고칠게 많아서 의외로 찾기 힘들다)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 자잘한 세팅 변경 및 post용 script 만들기]]></title>
    <link href="http://SanghyukChun.github.io/6/"/>
    <updated>2013-07-27T20:13:00+09:00</updated>
    <id>http://SanghyukChun.github.io/6</id>
		<content type="html"><![CDATA[<p>일단 자잘한 세팅으로 첫 번째 favicon. favicon이라는 녀석은 사이트에 즐겨찾기를 추가했을 때 옆에 작게 로고처럼 표시되는 녀석인데, default값이 octopress랑 같아서 도저히 작업하면서 신경쓰여서 바꿔버렸다. 이건 정말 간단하다. source/ directory바로 밑에 있는 favicon.png만 다른 파일로 바꿔주고 generate하고 deploy하면 끝</p>


<p>두번 째로 Permalink. 쉽게 생각하면 포스트의 고유 주소값. 내가 티스토리, 워드프레스로 넘어가면서 가장 불만이었던 점이 이 고유 주소값의 default가 포스트 이름이라는 점. 근데 나는 원래 포스트 이름이 꽤 긴편이고 거기다가 주소에 날짜가 들어가면 정말 우아하지 않다고 생각해서 가장 미니멀리즘하게 포스트 순서대로 하는 것을 좋아한다. 그런데 octopress도 기본 값이 년/월/일/제목 이다.. -_- 그래서 간단하게 바꿔줬는데, _config.yml에 있는 permalink를 /:year/:month/:day/:title에서 /:title로 바꿔주고 markdown 파일 이름을 2013-07-25-1.markdown 이런 식으로 바꿔주면 된다. 어차피 앞에 주소는 rake new_post할 때 해주는거니깐 딱히 고민할 이유는 없다.</p>


<p></p>

<p>근데 이렇게 하면 매번 생성할 때 마다 마지막 파일 이름이 뭐였는지 일일이 확인해야해서 굉장히 상당히 엄청 귀찮다. 그래서 아래와 같은 스크립트를 만들었음</p>


<p></p>

<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>num=$(ls -l | grep markdown | wc -l)
</span><span class='line'>bundle exec rake new_post["$((num+1))"]</span></code></pre></td></tr></table></div></figure>


<p>그냥 post.sh라고 이름 붙이고 /source/_post directory바로 밑에 두고 ./post.sh만 돌리면 알아서 순서대로 만들어 준다 굳굳</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script와 함께하는 Bundle exec~]]></title>
    <link href="http://SanghyukChun.github.io/5/"/>
    <updated>2013-07-27T17:15:00+09:00</updated>
    <id>http://SanghyukChun.github.io/5</id>
		<content type="html"><![CDATA[<p>진짜 rails 개발할 때 제일 귀찮았던 것이 rake를 하려고만 하면 버전이 안맞아서 bundle exec를 붙여줘야 했던 점. 물론 강제로 내가 버전을 낮추면 되지만 왜 굳이 잘 쓰고 있는 rake의 버전을 낮추냐는 마인드로 계속 썼었다. 그게 가능했던 이유는 사실 rails 개발할 때 rake는 생각보다 그렇게 빈번하게 쓰지 않는다. 주로 <code>rails s</code>(혹은 <code>rails server</code>) 아니면 가끔 디버깅 용 <code>rails c</code>(혹은 <code>rails console</code>)을 쓰고는 했는데 이녀석들은 거의 출근해서 실행시키면 거의 퇴근할 때 까지 다시 실행시킬 일 없이 쭉 실행된다 -_-;; 근데 블로깅을 하니깐 이게 죄다 rake다. Rakefile을 바꿔버리는 방법도 있지만 굉장히 귀찮기 때문에 그냥 그런 귀찮은 짓을 하느니.. 뭐 그래서 그냥 일일이 치고 있다 하하..</p>


<p>근데 이것도 한 두번이지.. 게다가 이건 포스트 쓸 때는 물론이고 preview 심지어 deploy까지 죄다 rake를 때려야 한다. 포스트 하나 당 최소 세번 -_-;;; 결국 안되겠다 싶어서 deploy.sh라는 녀석을 만들기로 결정</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>bundle exec rake deploy</span></code></pre></td></tr></table></div></figure>


<p>이게 끝이다. 그리고 deploy할 때마다 이름 묻는게 너무 귀찮아서 (password는 그러려니 한다. 맘에 안들면 ssh키를 쓰면 되는데 귀찮아서 -_-; 근데 조만간 쓰게 될 듯) remote origin의 url을 https에서 ssh로 바꿔버렸다.</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>git remote set-url origin git@github.com:SanghyukChun/SanghyukChun.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>음.. 바꾸고 나서 아직 deploy를 안해봤는데 이 포스트가 잘 올라가면 성공이고 안되면 다른 해법을 찾아야 한다 이런.</p>


<p>아무튼 귀찮은 것은 질색이기 때문에 좀 여러 방면에서 편하게 블로깅을 할 수 있는 툴들이나 스크립트를 많이 쓰게 될 것 같은 스멜~</p>


<hr>


<p>&#8212; 추가</p>


<p>아 ssh로 바꾸기는 해놨는데 ssh키가 등록이 안되어있어서 결국 도로묵이었다. <a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a>보고 순서대로 따라서 하니깐 잘 등록 완료. 이제 deploy만 하면 된다~</p>


<p>&#8212; 또 추가</p>


<p>아 범인을 발견했다. octopress에서 github pages에 대해서는 _deploy 밑에 따로 프로젝트를 관리하는데 나는 그걸 모르고 octopress의 url만 열심히 고치고 있었다 ㅋㅋㅋ blog_directory/_deploy/.git/config 를 고쳐야 한다. 즉, 다시 말해서 위에서 언급한</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>git remote set-url origin git@github.com:SanghyukChun/SanghyukChun.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>요놈은 root가 아니라 _deploy에서 실행시켜야 한다는 의미!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress - CSS 변경하기]]></title>
    <link href="http://SanghyukChun.github.io/4/"/>
    <updated>2013-07-27T16:17:00+09:00</updated>
    <id>http://SanghyukChun.github.io/4</id>
		<content type="html"><![CDATA[<p>평일에는 조금 바빴고 주말을 맞아 블로그를 다시 Customize하고자 간단하게 Document를 훑어보고 당장 Twitter Bootstrap을 적용시켰다. 한가지 당황했던 점은 Bootstrap이 2에서 3으로 version up 되면서 docs페이지가 완전히 정전 상태.. 그냥 급하게 Bootstrap team blog에서 다운받아서 소스만 붙여 넣었다. 나중에 version 3으로 업그레이드 되면 바꿔줘야 할 것 같은 부분이다. (근데 About Me 실컷 Bootstrap CSS Customizing하고 필요없는거 다 지우고 comon.css로 몰아놓고 1주일도 안되서 ver.3이라니.. deploy완전히 끝나면 훑어보고 마음에 들면 About Me를 통채로 들어내야 할수도;;)</p>


<p>아무튼, css를 바꾸는 방법은 간단했다. 공식 <a href="http://octopress.org/docs/theme/styles/">document</a>를 보면 <code>sass/custom/_style.scss</code>를 수정하면 된다고 한다. 간단하게 override하라는 의미인데, Bootstrap을 그냥 들어다가 붙이기만 해도 꽤 나름 훌륭한 스타일링이 된다. 내가 Bootstrap을 사랑하는 이유. 다만 폰트가 마음에 들지 않아서 (이상하게 대부분의 사이트가 그러하듯 sarif를 기본 폰트로 지정하면 윈도우 크롬 환경에서 폰트가 깨지는 경우가 종종있다.) 구글 웹폰트에서 나눔고딕코딩으로 적용시커주었다. 굳이 나눔고딕코딩으로 적용한 이유는 아무래도 이 블로그에는 코딩이 많이 들어갈 것 같고 간단하게 문서를 읽기에는 역시 나눔고딕코딩이 괜찮을 것 같아서이다. 방법은 간단하다 <code>sass/custom/_style.scss</code>에 아래처럼만 넣어주면 된다</p>


<figure class='code'><div class="highlight"><table><tr> <td class='code'><pre><code class=''><span class='line'>@import url(http://fonts.googleapis.com/earlyaccess/nanumgothiccoding.css);
</span><span class='line'>body {
</span><span class='line'>  font-family: "Nanum Gothic Coding";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>물론 나는 Bootstrap에 넣은 것이기 때문에 Bootstrap에서 body에 해당하는 부분만 바꾸어 주었다. 추가로 pre, code에 해당하는 부분 등에도 font-family가 설정되어 있어 그 부분도 마찬가지로 수정. 이렇게 처리하면 어렵지 않게 CSS style을 변경할 수 있다. 이제 layout을 뜯어고칠 차례!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Week1 - What is Machine Learning]]></title>
    <link href="http://SanghyukChun.github.io/3/"/>
    <updated>2013-07-27T00:14:00+09:00</updated>
    <id>http://SanghyukChun.github.io/3</id>
		<content type="html"><![CDATA[<p>최근 Andrew Ng Standford교수의 Coursera <a href="https://class.coursera.org/ml-003/class/index">Machine Learning Course</a>를 수강 중이다. 사실 나는 이미 Machine Learning Coursework을 끝마친 상태이기 때문에 굳이 이 Course를 다시 들을 필요는 없긴 하지만 나의 개념을 다시 다잡고 최근 공부에 있어 슬럼프 비슷한게 찾아왔기 때문에 이 강의를 들으면서 나 자신을 조금 자극할 생각으로 수강하고 있다. 수강을 하면서 목표한 바가 있는데</p>


<ol>
    <li>최대한 빠른 시간 안에 수강 끝내기</li>
    <li>수강을 끝내고 어느 정도 section을 묶어서 블로그에 정리하기</li>
    <li>수강을 다 끝내고 나면 이를 응용한 프로젝트를 만들어보기</li>
</ol>


<p>이것들을 꼭 달성하는 것이다. 아직까지는 겨우 Week 1의 기본적인 내용들을 끝 마친 상태이기 때문에 별 다른 어려움은 없어보이지만 아무래도 주말에 주로 course를 몰아 들어야하기 때문에 마냥 잘 될 것이라고 기대하는 것에는 조금 무리가 있다는걸 나도 알고 있다. 그래도 열심히 해야지.</p>


<p>이 포스트는 두 번째 목표인 블로그에 정리하기 목적으로 쓰는 포스트이다. Week1은 코스와 머신러닝에 대한 간략한 설명, 그리고 supervise learning을 위한 기본적인 컨셉들 - cost function, gradient descent - 을 주 내용으로 삼고 있다.</p>


<p>이 개념들을 설명하기에 앞서, 과연 머신러닝이란 무엇일까. 단순히 백과사전에 있는 내용이나 인터넷에 있는 내용이 아니라, 내가 생각하는 머신러닝은 무엇일까 먼저 생각해봐야겠다. 일단 머신러닝은 AI쪽에서 맨 처음 나온 개념으로 알고 있다. 처음부터 완벽하고 완성된 알고리즘을 통해 인공지능을 부여하는 것은 사실상 불가능하고, 대신 마치 사람이나 일반적인 지능을 가진 생명체가 그러하듯 기계에도 학습기능을 부여하여 기계가 스스로 알아서 학습하도록하는 개념이 바로 머신러닝이다. 멋지지 않은가. 사실 나는 AI에는 별로 흥미가 없고 지금도 머신러닝을 공부한다고 해서 AI쪽으로 진로를 잡고 싶은 생각은 추호도 없다. 그럼에도 불구하고 내가 머신러닝에 관심을 가지고 있고 계속 공부하는 이유는, 지금의 머신러닝은 단순한 AI가 아니라 (물론 AI가 절대로 단순하지는 않다) 바로 데이터 pattern recognition으로 생각해도 무방하기 때문이다. 다시 말해서 특정 dataset을 계속 학습시켜서 그 데이터에서부터 패턴을 추출하는 것이다. 예를 들어보자. 많은 소비자들이 A라는 상품을 구매하고 나서 B라는 상품을 구매하는 어떤 패턴이 있다고 가정해보자. 하지만 두 개의 상품은 굉장히 연관성도 모호하고 현재 지금 물건을 판매하는 판매상의 입장에서 굉장히 많은 물품이 있어서 모든 물품에 신경을 쓸 수 없는 상황이라 생각해보자. 어디서 많이 본 상황이 아닌가? 바로 인터넷 쇼핑몰이다. 수 많은 웹 로그를 수집하면 이런 소비자들에게 다른 상품을 추천해주고 더 많은 수익을 거둘 수 있는 것이다. 실제로 이런 사례로 아마존이 있다. 자 여기에서 다시 내가 생각하는 머신러닝을 정의해보자.</p>


<p>머신러닝은 그 관계를 알 수 없는 수 많은 데이터들 사이에서 관계를 찾아내주는 마법과 같은 기술이다.</p>


<p>물론 엄밀히 정의하면 위와 같은 말은 틀릴 수 있지만, 내가 생각하기에는 충분히 의미가 있는 말이다. 자 이제 다시 본론으로 넘어가보자. 머신러닝에서는 크게 두 가지 종류가 있다. supervised learning과 unsupervised learning이 그것인데, 사실 더 엄밀히 말하면 더 많은 종류가 있지만 일단 지금은 이것만 알아도 충분하다.</p>


<p>먼저 supervise learning에 대해 설명해보자. supervised learning은 이미 명확하게 답이 정해져 있는 것의 답을 찾는 것이다. 쉽게 생각하면 2차원에 흩뿌려진 점 들을 보고 이 점들이 어떤 함수를 구성하고 있을까를 추측하는 것이다. 예컨데 이 강의에서 예시로 드는 방 평수와 가격 사이의 상관관계를 찾는 방법도 있을 수 있고, 종양의 크기와 그 종양이 악성인지 아닌지의 관계를 찾는 방법도 있을 수 있다. 전자의 방법은 방 평수, 그리고 가격이 전부 continuous한 값을 가진다. 다시 말해서 real value이다. 이런 경우를 regression이라 부른다. 반면 뒤의 경우는 종양은 악성이냐 혹은 그렇지 않느냐 두 가지 경우의 수 밖에 없다. 이런 경우를 classification이라고 부른다.</p>


<p>그러면 unsupervised learning은 무엇일까? 앞서 본 사례들은 그 결과가 정해져있다. 방 평수 그리고 방 가격, 종양의 크기와 악성도 등. 하지만 unsupervised learning은 그 결과가 정해져있지 않다. (정확히 말하면 data가 labeled 되어있지 않은 data이다.) 예를 들어서 특정 데이터들이 흩뿌려져 있고 이 데이터들이 전혀 label되어있지 않을 때 이 데이터들을 clustering하는 것이 대표적인 예이다. supervised learning에 비해서 어렵고 구현하기도 복잡한 편이다.</p>


<p>자 그러면 supervise learning에 대해 조금 더 자세히 알아보자. 아까 예를 들었던 방 평수와 방 가격 사이의 관계도를 다시 생각해보자. 만약 10평일떄 20만원 20평일 때 30만원 30평일 때 40만원이라면 40평 일때의 가격은 어떻게 될까? 아마도 50만원일 가능성이 클 것이다. 이렇게 선형적으로 추론하는 것을 linear regression이라 한다. 그리고 이때 예측 되는 데이터와 결과값 사이의 관계(함수)를 hypothesis라고 부른다. 우리말로 옮기면 가설 정도로 해석이 가능한데, 우리가 올바른 값을 아는 것이 아니라 그 결과를 추론할 수 밖에 없기 떄문에 이런 이름으로 명명했지 않을까 싶다. 방금의 경우는 굉장히 간단하게 그 결과를 예측했지만 조금 모호한 경우는 어떨까? 아마 우리는 regression을 통해 상당히 많은 hypothesis를 얻을 수 있을 것이다. 이 hypothesis 중에서 가장 좋은 녀석은 어떻게 고르지? 그래서 도입되는 개념이 바로 cost function 혹은 loss function이다.</p>


<p>Cost function을 정의함으로써 이 함수가 기존에 주어진 데이터에 대해서 얼마나 정확한지 유추할 수가 있다. 예를 들어서 우리가 예측한 함수가 y = x이고 x,y = 1,2 2,3 4,5라고 생각해보자. 그렇다면 아마 x가 1,2,3일 떄 각각 1 만큼 예측값과 실제 값이 차이가 날 것이다. Cost function은 이 차이값들을 통해 얼마나 이 함수가 원래 개형과 가까운가를 유추한다. 이 강의에서는 그 차이의 제곱꼴을 더한 것의 평균값을 제안하는데, 실제로 무난하게 많이 쓰인다. 또 많이 쓰이는 함수로는 0-1 함수라고 해서, 정확한 값이면 0, 조금이라도 다른 값이라면 1을 return하는 함수를 만들어서 cost를 계산한다.</p>


<p>마지막으로 gradient descent만 설명하면 week 1은 끝난다. Gradient Descent라는 것은 Gradient계산을 통해 함수의 local minimum을 찾아가는 과정이다. 함수가 가장 빠르게 감소하는 방향으로 쭉 따라 내려가다보면 가장 낮은 지점까지 도달하고 그것이 바로 local minimum이다. 산 위에서 가장 빠르게 아래로 내려가는 방향을 따라서 산을 내려가는 것이라고 생각하면 간단하다. 그런데 문제가 하나 있는데, 산을 내려오더라도 우리는 지금 위치에서 가장 빠르게 내려가는 길을 구하는 것이지 전체에서 가장 낮은 지점으로 내려가는 것은 아니기 때문에 항상 전체 함수에서 가장 낮은 값으로 수렴하지는 않는 다는 것이다. 이런! 때문에 초기에 어느 지점에서부터 내려가느냐가 그 결과값에 영향을 크게 미치게 되는 것이다. 머신러닝에서는 상당히 자주 쓰이는 개념이고 이 local minimum problem은 끝까지 성능에 있어서 치명적인 단점이 되는 경우가 많다. 이 강의에서는 최적의 loss function을 찾는 방법으로 이 gradient descent를 소개하는데, 강의에서도 언급되 듯 정말 많은 머신러닝 알고리즘 등에서 gradient descent는 많이 쓰이는 개념이니 어느 정도 개념을 숙지해두는 편이 좋다.</p>


<p>이렇게 첫 주 강의를 정리해보았다. 점점 내용도 많아질테고 지금처럼 텍스트로만 설명하기 점점 힘들어지겠지만 그래도 최대한 노력을 해서 처음 목표한 바를 꼭 이룰 수 있었으면 좋겠다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 설치하고 포스팅하기]]></title>
    <link href="http://SanghyukChun.github.io/2/"/>
    <updated>2013-07-25T20:00:00+09:00</updated>
    <id>http://SanghyukChun.github.io/2</id>
		<content type="html"><![CDATA[<p>블로그를 설치하면서 했던 작업들을 간단하게 기록 겸 정리해서 올려본다.</p>


<h4>Github Pages</h4>


<p>먼저 Github에서 제공하는 Pages를 사용해 블로그로 사용할 repository를 만들어야한다. Github Pages란 github에서 제공하는 일종의 호스팅같은 개념인데 무엇보다 가장 좋은 점은 역시 &#8216;공짜&#8217;라는 것. 전혀 비용도 들지 않고 웹프로그래밍에 익숙한 사람이라면 금방 사용할 수 있을 정도로 아주 손쉽고 간편하다.</p>


<p>Github는 당연히 알고 있다고 가정하고, Github Pages를 만드는 과정에 대해서 간략하게 설명하도록 하겠다. 먼저 자신의 이름으로 된 repository를 만들어야한다.</p>


<pre>username.github.io</pre>


<p>위와 같이 만들면 되고, 나의 경우는 SanghyukChun이 username이니 <code>SanghyukChun.github.io</code> 처럼 만들면 된다. 아주 간단!</p>


<p>맨 처음 만들 때 Readme등으로 initialize를 해도 괜찮지만 지금은 일단 하지 말고 그냥 만들어두기만 한다. 원래 이 상태에서 Setting에서 Github Page를 만들고하는 과정이 더 있어야하지만 지금은 Octopress를 Pages Root에 설치한다고 가정했을 때를 기반으로 설명하기 때문에 생략하겠다. Github Pages에 대한 자세한 설명은 <a href="http://pages.github.com/">공식 도큐먼트</a>에서 확인할 수 있다.</p>


<h4>Octopress 설치하기</h4>


<p>Octopress는 Ruby 기반으로 만들어진 Framework이므로 당연히 Ruby가 필요하다. 나는 이전에 Rails개발을 했었기 때문에 루비도 1.9.3으로 버전업이 되어있고 rvm이나 rake도 전부 최신버전이므로 아무 문제 없이 넘어갔으므로 이 부분에서 문제가 있다면 추가 구글링을 필요로 할 것이다. 이 포스트는 &#8216;당연히&#8217; git도 미리 깔려있고 &#8216;당연히&#8217; Ruby나 기타 rvm이니 rake니 하는 것들도 전부 최신이라 이 부분에서 아무런 문제가 없는 사람들이 이 글을 읽을 것이라고 가정하고 썼으므로 해당 부분에서 문제가 생긴다면 마찬가지로 추가 구글링을 필요로 할 것이다.</p>


<p>일단 octopress repository를 clone해야한다. 지금 clone하는 repository는 앞으로 모든 블로그작업을 하게 되는 workspace가 된다. 편한 위치에 받자</p>


<pre>git clone git://github.com/imathis/octopress.git octopress</pre>


<p>이제 octopress directory로 이동한 후 bundle을 설치한다. rails나 ruby 관련 어플리케이션을 작업했던 분들에게는 친숙한 과정일 듯</p>


<pre>gem install bundler
bundle install
rake install</pre>


<p>여기까지 했으면 이제 거의 끝났다. rake할 때 버전 어쩌고 거린다면 bundle exec를 붙여서 bundle exec rake install로 해주면 된다. 모든 rake에 그렇게 해야하는데 이게 rake 버전이 내가 가진 버전이 더 높아서 그런거니 그냥 그러려니 하고 넘어가면 된다. Rails 개발할 때는 너무 귀찮아서 rake를 bundle exec rake로 key binding해버리고 싶은 욕구까지 들었으니.. ㅎㅎ 마지막으로 지금 가지고 있는 Repository를 아까 생성한 github.io Repository에 remote로 추가해줄 차례이다.</p>


<pre>rake setup github_pages</pre>


<p>Github계정을 물어볼텐데 간단하게 입력하면 Repository가 관리하는 프로젝트가 Octopress가 관리하고 있는 https://github.com/imathis/octopress 에서 본인의 Repository로 변경되게 된다. 이제 Deploy를 해보자</p>


<pre>rake generate
rake deploy</pre>


<p>공식 홈페이지에서는 generate을 하고 deploy를 하라고 되어있는데 굳이 generate를 하지 않아도 괜찮을 것 같다. 아무튼 이러면 이제 github.io에 배포가 된거다. 이제 username.github.io로 접속해보면 본인의 Octopress Blog를 확인할 수 있다.</p>


<h4>Octopress로 포스트하기</h4>


<p>이제 Post를 작성해보자.</p>


<pre>rake new_post</pre>


<p>공식 홈에는 rake new_post[&#8220;post name&#8221;]으로도 된다는데 난 에러만 뱉어서 그냥 이렇게 입력하고 그 다음 post이름을 입력한다. 이렇게 하면 source/_post 아래에 markdown문서가 생성된다. 그 파일을 수정하면 된다. sublime ~~~~.markdown으로 들어가면 (별다른 설정이 없다면 sublime ~~~으로 sublime을 못 쓴다. 뒷 문단에 설명해놓았으니 참고하길)</p>


<pre>---
layout: post
title: "Octopress 설치하고 포스팅하기"
date: 2013-07-25 20:00
comments: true
categories: 
---</pre>


<p>이제 이 파일에서 간단한 설정을 해주고 (<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a> 참고) &#8212; 바로 아래줄 부터 작성하면 된다. 포스트는 전부 HTML기반으로 작성해야한다. 다시 말해서 그냥 웹에서 작성하듯 작성할 수가 없다는 의미이고 그 귀찮은 html코딩을 매번 해야한다. 다른 방법이 없어보이지는 않는데 지금은 다른 어플리케이션을 찾기도 귀찮고 해서 그냥 편집기로 코딩하고 있다. 따라서 편집기를 하나 마련하는 편이 정신 건강에 좋은데 당연히 강력하게 Sublime Text를 주장하는 바이며, Emmet Package를 설치하여 귀찮은 html코딩을 좀 재밌고 간편하게 하기를 강력 권장한다. 이 녀석을 사용하면 정말 편하다. 특히 <code>&lt;p&gt;&lt;/p&gt;</code> 같은 귀찮기 그지없는 녀석들도 간단하게 p를 입력하고 tab만 입력하면 된다. 오오 아름다운 세상. 터미널에서 작업이 모두 일어나기 때문에 아래 symbolic link를 한번 생성하여 터미널에서도 열 수 있도록 작업하는 편이 덜 귀찮을 것이다.</p>


<pre>ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime</pre>


<p>한번만 symbolic link를 생성하고나면 terminal에서도 <code>sublime test.txt</code> 와 같은 형태로 sublime실행이 가능하다. 이제 작성만 하면 된다.</p>


<p>어느정도 작성이 끝나고 preview가 필요하다고 생각되면 아래의 명령어를 입력한다.</p>


<pre>rake preview</pre>


<p>localhost:4000에 간단한 웹서버를 띄워준다. 메시지 나오는걸 봐서는 rails기반인듯. rails가 없는 컴퓨터에서 돌아가는지 여부는 확인 안했지만 아마 충분히 가능할 것 같다. 편집을 하다가 변경사항을 저장하면 그 즉시 asset이 reload되서 바로 새로고침으로 확인할 수 있다. 매번 deploy해야하는 자바 뻐큐머겅 ㅗ 두번머겅 ㅗㅗ 어느 정도 편집이 끝났으면 이제 배포를 하자</p>


<pre>rake deploy</pre>


<p>맨 처음 블로그를 배포했던 그 명령어 그대로 하면 된다. 이제 코드가 github로 push되고 github.io 페이지로 들어가서 배포한 post를 확인하면 끝난다. 이 포스트는 <a href="http://octopress.org/docs/">공식 도큐먼트</a>의 <a href="http://octopress.org/docs/setup/">initial setup</a>, <a href="http://octopress.org/docs/blogging/">blogging basic</a>, <a href="http://octopress.org/docs/deploying/github/">deploying to github pages</a>를 참고하였다.</p>


<p>앞으로 블로그 커스터마이징도 하고 세팅도 많이 변경할텐데 변경 사항들은 그때그때 블로그에 포스팅하려한다. 나도 도움이 되고 구글링을 하다가 지친 누군지 모를 그 사람에게도 도움이 되겠지.</p>

]]></content>
  </entry>
  
</feed>
