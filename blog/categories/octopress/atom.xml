<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | README]]></title>
  <link href="http://SanghyukChun.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://SanghyukChun.github.io/"/>
  <updated>2016-03-26T11:47:00+09:00</updated>
  <id>http://SanghyukChun.github.io/</id>
  <author>
    <name><![CDATA[Sanghyuk Chun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Markdown Kramdown으로 이전하기]]></title>
    <link href="http://SanghyukChun.github.io/98/"/>
    <updated>2016-03-21T00:45:00+09:00</updated>
    <id>http://SanghyukChun.github.io/98</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#html--markdown-">HTML 코드에서 Markdown 코드로</a></li>
  <li><a href="#markdown--mathjax">기존 Markdown 디버그 (MathJax)</a></li>
  <li><a href="#kramdown-markdown">Kramdown Markdown</a>    <ul>
      <li><a href="#table-of-contents-toc">Table of Contents (ToC)</a></li>
      <li><a href="#inline-attribute-lists-ial">Inline Attribute Lists (IAL)</a></li>
      <li><a href="#section">개인적으로 불편한 점들</a></li>
    </ul>
  </li>
  <li><a href="#todo">TODO</a></li>
</ul>

<h3 id="html--markdown-">HTML 코드에서 Markdown 코드로</h3>
<p>이 블로그를 시작한 이래로, 나는 줄곧 markdown code가 아니라 진짜 pure html code로 블로깅을 해왔다.
별 다른 이유가 있다기보다는, 이 블로그를 맨 처음 시작할 때만 하더라도 markdown에 대한 개념도 많이 없었고,
어느 정도 시간이 흐른 뒤에는 markdown으로 작업하려니 몇 가지 충돌사항들이 발생하는데, 이걸 일일이 처리하기도 귀찮고,
그걸 처리하자고 일부는 markdown으로 쓰고 일부는 html로 작성하려니 정말 끔찍한 코드가 나와서, markdown을 버렸다.</p>

<p>Markdown과 충돌을 일으키는 대표적인 녀석은 바로 <code>MathJax</code>.
알 수 없는 이유로, markdown 안에 MathJax 문법을 쓰면 제대로 동작하지 않았다 (정확히는 escape됐다).
사실 조금만 알아보면 고칠 수 있었는데, 그때는 당췌 원인도 잘 모르겠고, 그냥 힘드니까 버려두었다가,
오늘 갑자기 삘이 꽂혀서 막 고치다가 정신을 차려보니 전체 소스 코드를 뜯어고치고 있더라.</p>

<p>결론적으로 지금은 only markdown 문법만 사용해도 블로깅을 할 수 있도록 소스코드를 뜯어고친 상태이고,
지금 이 글 역시 markdown으로만 작성하고 있다. Markdown을 사용했을 때의 장점이라면,</p>

<ol>
  <li>편집기 상에서 각각의 포스트들이 훨씬 더 readable하다.
    <ul>
      <li>아무래도 html tag가 난잡하게 섞여있으면 편집기로 코드를 읽기가 벅차다. 그럴 일은 없지만, 만약 html syntax highlighting을 못해주는 편집기라도 썼다가는….</li>
      <li>사실 이런 이유로, 일일이 html로 코딩할 수 없는 수업, 세미나, 아이디어 정리 등을 포스팅할 때 아래같은 문제가 생긴다.</li>
    </ul>
  </li>
  <li>포스팅을 할 때에 덜 번거롭다.
    <ul>
      <li>HTML을 생으로 코딩한다는 얘기는, id, class 같은 attribute라거나, a tag의 내부도 일일이 쳐줘야하고.. 여러모로 귀찮다.</li>
      <li>HTML로 코딩하는 것 보다는 확실히 생산성이 증가한다. 특히 내가 html 코딩용으로 맞춰둔 sublime text를 쓸 수 없는 환경에서 텍스트로 적은 글을 다시 html로 포팅하는 일은 시간만 엄청 잡아먹고 전혀 생산적이지 않은 일인데 그런 시간을 많이 줄일 수 있을 것 같다.</li>
    </ul>
  </li>
  <li>전체적인 포스팅 시간이 감소한다.
    <ul>
      <li>앞에서 얘기한 덜 번거롭다는 점도 물론 크게 작용한다.</li>
      <li>지금 내가 사용 중인 octopress의 경우, rails 기반이라 글을 수정하면 다시 컴파일을 하지 않아도 알아서 글이 rebuild되긴 하지만, 어쨌거나 이것도 시간이 든다.</li>
      <li>근데 markdown으로만 코딩을 할 수 있다면 그냥 빠르고 간단한 markdown editor로 글을 쓴 다음 붙여넣기만 하면 된다. 수식이나 그림같은 몇 가지 markdown으로만 지원되지 않는 방식들은 나중에 한 번에 확인하면 되니까 훨씬 시간이 감소한다.</li>
    </ul>
  </li>
</ol>

<p>항상 최고일 수는 없듯, markdown을 썼을 때의 단점도 있다.</p>

<ol>
  <li>명시적으로 코드를 쓰는 것이 아니기 때문에 원하는대로 동작하지 않을 때 디버깅하기가 많이 귀찮다
    <ul>
      <li>대표적인 예로 뒤에서 설명할 <code>MathJax</code> 디버깅할때 진짜..</li>
    </ul>
  </li>
  <li>어쩔 수 없이 html componenet를 하나하나 작업해야할 때가 있는데, 이때 마크다운만 쓰면 어쩔 수 없이 한계가 온다.
    <ul>
      <li>지금 image caption을 div tag를 써서 div &gt; img, p로 구성한 상태인데, 이걸 마크다운으로…. 적당히 플러그인으로 코딩하면 어떻게든 할 수 있지 않을까 고민 중이다.</li>
    </ul>
  </li>
</ol>

<p>하지만 이래저래 markdown을 썼을 때의 생산성만 못하기 때문에 markdown으로 제대로 쓸 수 있도록 몇 가지 작업을 시작했다. (마치 C가 memory를 명시적으로 다루기에 빠워하지만, 코드 생산성은 파이썬이나 루비를 못따라가는 것과 비슷한 이치)</p>

<h3 id="markdown--mathjax">기존 Markdown 디버그 (MathJax)</h3>
<p>기존 markdown기반 코드의 가장 큰 문제는 <code>MathJax</code>가 전혀 동작하지를 않는다는 것이였다. 예를 들어서</p>

<p><code>
* example 1: $\alpha$.
* example 2: \(\alpha\).
</code></p>

<p>이런 코드를 작성했다고 했을 때, 둘 다 제대로 된 $\alpha$를 보여주는 녀석이 없었다.
뭐, 일단 여러 이유가 있었는데, 먼저 원래대로라면 위에 있는 <code>$</code> 쓴 녀석은 잘 동작해야한다.
하지만 제대로 동작하지 않았는데, 그건 내가 설정을 좀 잘못했던거고,</p>

<p>문제는 두 번째 녀석이었는데, 이 녀석은 다른게 문제가 아니라 <code>\</code> 가 escape되어버리는 문제가 있었다.
그러니까 저 코드를 돌리면, <code>example 2: (alpha)</code> 같은 모양이 나와서 속은 터지고 원인은 모르는 상황이 발생.
그래도 이게 markdown이 escape을 해버리는 거라서 html로 explict하게 적어주면 잘 동작했다.
그래서 결국은 저 간단한 코드가 이런 모양새가 되어버렸다</p>

<p>```html</p>
<ul>
	<li>example 1: \(\alpha\)</li>
	<li>example 2: \(\alpha\)</li>
</ul>
<p>```</p>

<p>음.. 딱 봐도 지저분하지 않은가? 문제점을 해결하려고 몇 번 시도하다가,
초반에 <code>MathJax</code>에서 많이 고생했던 터라, 일단 동작하는 상태로 방치해둔게 벌써 거의 2년이 지난 셈이다.</p>

<p>결국, 지금은 <code>MathJax</code>의 설정을 다음과 같이 고쳤다.</p>

<p><code>js
&lt;script type="text/x-mathjax-config"&gt;
    MathJax.Hub.Config({
      jax: ["input/TeX", "output/HTML-CSS"],
      tex2jax: {
        inlineMath: [ ['$', '$'] ],
        displayMath: [ ['$$', '$$'] ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
&lt;/script&gt;
</code></p>

<p>내가 앞에서 <code>$</code>가 제대로 동작하지 않은 이유는, 이 설정에서 제대로 명시가 되지 않아서 였던 모양이다.
원래 기본옵션으로 되어야 맞는데, 왜인지는 모르겠지만 잘 되지 않았던 모양.</p>

<p>그리고 지금은 <code>\(\)</code>와 <code>\[\]</code>를 아예 패턴에서 빼버린 상황인데,
먼저 <code>\(\)</code>나 <code>\[\]</code>같은 방식으로 수식을 쓰면 가독성이 떨어진다는 점 (처음 쓸 때는 LaTex 초보라 <code>$</code>같은 좋은걸 몰랐다)
그리고 앞에서 말한대로 자꾸 escape해버리는 경우가 발생해서 아예 없애버렸다.
이게 언제 심각해지냐하면, 다음과 같은 방식의 markdown을 쓸 때에 결과 값이 이상해진다</p>

<p><code>
다음 링크 [[링크]](http://sanghyukchun.github.io)를 누르면 제 블로그로 갑니다.
</code></p>

<p>내가 이해하기로는 octopress에서 <code>MathJax</code>를 쓰면,</p>

<ul>
  <li>markdown (컴파일) → (public에 생성된) html → <code>MathJax</code>로 parsing</li>
</ul>

<p>이런 현상이 일어나는데, 위와 같은 방식으로 컴파일을 하고나면 경우에 따라 <code>[]</code>가 <code>\[\]</code>로 인식이 되어서
‘링크’가 display math로 떠버리는 황당한 경우가 생기더라.
결국 보기도 편하고 쓰기도 편한 달러로 통일.</p>

<ul>
  <li><a href="https://www.lucypark.kr/blog/2013/02/25/mathjax-kramdown-and-octopress/">https://www.lucypark.kr/blog/2013/02/25/mathjax-kramdown-and-octopress/</a> 같은 경우에도 보면 markdown 문법이랑 충돌하거나, markdown이 escape하는 녀석을 MathJax에서 쓰면 좀 귀찮아진다.</li>
</ul>

<h3 id="kramdown-markdown">Kramdown Markdown</h3>

<p>원래 내 Octopress는 <a href="http://dafoster.net/projects/rdiscount/">RDiscount</a> markdown을 쓰고 있었다.
괜찮은 녀석이긴 한데, 내가 결정적으로 원하는 결정적인 기능인 Heading tag에 자동으로 id 추가기능을 전혀 지원하지 않아서 다른 markdown으로 이전하기로 결정했다.
내가 후보로 살펴본 markdown은 <a href="http://kramdown.gettalong.org/">Kramdown</a>과 <a href="https://github.com/vmg/redcarpet">Redcarpet2</a>이었는데, 이 중 Redcarpet2는 GitHub의 markdown의 베이스가 되는 녀석이라서 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 좀 많이 탐을 냈는데, octopress와는 궁합이 잘 맞지 않아서 포기했다.</p>

<p>Octopress에서 Redcarpet을 쓰는 방법<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>에 대해 포스팅을 한 사람도 있어서 따라서 해봤는데,
나는 자꾸 <code>atom.xml</code>에서 <code>Liquid Exception</code>이 발생하더라.
내용은 <code>render</code>라는 tag가 없다는건데, 뭔가 redcarpet을 쓰면 내가 octopress에서 남발하고 있는 render가 제대로 동작하지 않는 모양. 결국 포기하고 Kramdown으로 넘어가기로 했다.</p>

<p>Kramdown으로 바꾸기 위해서는 <code>_config.yml</code>에서 markdown부분을 <code>markdown: kramdown</code>으로 수정하기만 하면 된다.
몇 가지 옵션을 줄 수 있는데, 아직 옵션은 안줘봤다.</p>

<h4 id="table-of-contents-toc">Table of Contents (ToC)</h4>

<p>내가 RDiscount를 버린 가장 큰 이유는 바로 Table of Contents가 없다는 건데,
꼭 필요한건 아니지만, 가끔 ToC가 있었으면 할 때가 있는데도 만들 수가 없어서 좀 번거로울 때가 있었다.
그리고 또 다른 포스트에서 특정 포스트의 Heading을 refer 해야할 때에도 id auto generation이 안되기 때문에
내가 일일이 다시 id tag를 달아줘야하는 끔찍함이 있었는데, 그런 불편함도 사라졌다.</p>

<p><a href="http://kramdown.gettalong.org/converter/html.html#toc">링크</a>를 타고 들어가면 ToC를 만드는 법에 대해 나와있으니 참고하면 좋을 것 같다. 아무튼 지금은 맨 앞에 이렇게만 쓰면 된다. 엄청 편함.</p>

<p>```
* TOC</p>
<p>```</p>

<p>아 물론 css를 좀 고쳐야한다. <a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/</a> 를 참고하시길.</p>

<h4 id="inline-attribute-lists-ial">Inline Attribute Lists (IAL)</h4>

<p>그리고 <code>Kramdown</code>의 또 하나의 장점이라면 markdown의 여러 component들에게 inline으로 attribute를 지정할 수 있다는 것이다.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>
이게 무슨 말이냐 하면, 내가 지금 사용 중인 reference list는 다음과 같은 코드로 작성된다.</p>

<p><code>html
&lt;ol class="reference"&gt;
	&lt;li&gt;referenece 1&lt;/li&gt;
	&lt;li&gt;referenece 2&lt;/li&gt;
&lt;/ol&gt;
</code></p>

<p>리스트에 class attribute가 있어서 어쩔 수 없이 html 코드를 직접 써야하는데, <code>Kramdown</code>을 쓰면 다음과 같이 쓸 수 있다.</p>

<p class="reference">```
1. reference 1
2. reference 2</p>
<p>```</p>

<p>당연히 <code>#</code>을 쓰면 id도 가능하다!</p>

<h4 id="section">개인적으로 불편한 점들</h4>
<p>일단 <code>\|</code> 이 무조건 table로 사용이 된다. 그래서 <code>MathJax</code>에서 <code>\| A \|</code> 같은걸 쓰려면 <code>\\\| A \\\|</code> 처럼 escape이 된 형태로 써야한다 (심지어 지금도 그렇게 쓰고있다!). 내가 table을 쓰면 상관이 없지만, table을 안쓰는 입장에서 자꾸 이렇게 되니까 답답해 미칠 것 같다. 하다하다 짜증나면 p tag쓰면 된다지만… 그래도 ㅠㅠ..
그리고 링크도 <code>&lt;  &gt;</code>로 묶어줘야지만 auto link가 되는 것도 좀 귀찮다. 근데 이건 장단이 있으니까 익숙해지면 될 것 같다.</p>

<p>그걸 제외하면 아직까지는 엄청 불편한건 없어보인다.
사실 그 동안 markdown으로 글을 안쓰다보니, 갑자기 markdown을 쓰는 것 만으로 글이 엄청 편해져서, 이런 단점들은 아직까지는 그닥 크지 않다.</p>

<h3 id="todo">TODO</h3>
<p>오늘 하루 종일 이 작업뿐 아니라 블로그 공사에만 집중 했음에도 불구하고 아직도 할 일이 많다.
오늘 한 대표적인 일 중 하나라면 전체 CSS랑 HTML layout을 살짝 손봤다. 디테일한 부분을 손봤기 때문에 사실 크게 티는 안나지만, 그래도 뭐, 꽤나 만족한다.
이제 남은 녀석들은 예전 html로 작업한 녀석들 중에 필요한 녀석들은 markdown으로 포팅하는 무시무시한 작업을 제외한다면,
그 이외에는 다 루비코드를 직접 건드려야하는 녀석들이다. 대표적으로 남은 놈들이라면..</p>

<ul>
  <li>Syntax Highlighting 복구하기
    <ul>
      <li>이건 원래 되던 기능인데, 내가 bootstrap붙이면서 충돌이 너무 일어나서 겨우겨우 depreciate시켜놨더니 이제 무슨 수를 써도 highlighting이 안된다 (..)</li>
      <li>이건 js로 되는 문제가 아니라 원래 하이라이팅을 해주는 octopress 코드를 충돌이 일어나지 않도록 뜯어고쳐야할듯..</li>
      <li>오늘 오전부터 한 2-3시까지 이것만 했는데 도대체 왜 안되는건지 갑갑해서 돌아버리겠다.</li>
    </ul>
  </li>
  <li>Image Caption
    <ul>
      <li>지금 image caption은 만들어는 놨는데, markdown으로 하기에는 코드가 좀 끔찍하다.</li>
      <li><code>&lt;div class="caption"&gt;&lt;img src="img"&gt;&lt;p&gt;caption&lt;/p&gt;&lt;/div&gt;</code> 이런 식의 코드라서, 뭔가 루비 코드를 직접 건드려야 할 것 같다.
        <ul>
          <li><a href="http://blog.zerosharp.com/image-captions-for-octopress/">http://blog.zerosharp.com/image-captions-for-octopress/</a> 응용하면?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Github style heading 링크
    <ul>
      <li>이건 루비코드를 건드릴 필요는 없지만, 그래도 할게 좀 많아보인다.</li>
      <li><a href="http://ben.balter.com/2014/03/13/pages-anchor-links/">http://ben.balter.com/2014/03/13/pages-anchor-links/</a> 시간날 때 해보자.</li>
    </ul>
  </li>
</ul>

<p>조만간 시간있을 때 Syntax 부분이랑 anchor link는 다시 덤벼봐야겠다.
Caption은 일이 좀 커질 것 같아서..</p>

<p>아무튼 markdown으로 포스팅하니까 진짜 편하네.</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://github.com/blog/832-rolling-out-the-redcarpet">https://github.com/blog/832-rolling-out-the-redcarpet</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://yangsu.github.io/blog/2012/10/11/using-octopress-with-github-flavored-markdown-redcarpet/">http://yangsu.github.io/blog/2012/10/11/using-octopress-with-github-flavored-markdown-redcarpet/</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://kramdown.gettalong.org/syntax.html#inline-attribute-lists">http://kramdown.gettalong.org/syntax.html#inline-attribute-lists</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[블로그에서 Latex 수식 사용하기(MathJax)]]></title>
    <link href="http://SanghyukChun.github.io/25/"/>
    <updated>2013-11-05T19:26:00+09:00</updated>
    <id>http://SanghyukChun.github.io/25</id>
    <content type="html"><![CDATA[<p>수식을 일반 텍스트로 표현하는 것은 상당히 가독성도 떨어지고 적는 사람도 매우 불편하다. 요즘 포스팅에서 수식을 적을 일이 많아져서 이 참에 블로그에 Latex 문법을 사용할 수 있으면 좋겠다는 생각이 들어서 이번 기회에 추가해봤다. 여러가지 방법이 있을 수 있지만, 내가 선택한 솔루션은 <a href="http://www.mathjax.org/"></a>MathJax라는 javascript plugin.. 이걸 사용한 이유는 가장 많이 쓰이는 것 같고, 자료도 많고 여러 브라우저나 OS랑 호환성도 좋은 것 같아 사용하기로 했다. 무엇보다 직접 javascript를 더 추가하지 않아도 된다는 사실도 좋았다. 속도가 엄청 중요한 웹페이지가 아니고서야 plugin을 다운로드 받고 하는 것 보다 특정 cdn에서 온라인으로 다운로드 받게 하는게 개발하는 입장에서는 훨씬 편하다.</p>
<p>방법은 매우 간단하다. 아래와 같은 코드를 head에 넣으면 끝. </p>
<p><code>
&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;
</code></p>
<p>이제 준비는 끝났다. 이제 수식을 넣어보자.</p>
<p>사용법은 어렵지 않다. 만약 $ E=mc^2 $를 쓰고 싶으면 </p>
<p><code>
$ E=mc^2 $
</code></p>
<p>라고 적으면 된다. 위에 E=mc^2를 적은 곳에 다른 Latex 문법을 넣으면 다른 수식을 표현할 수 있다.</p>
<p>이번 포스팅의 참고 포스트: <a href="http://blog.daum.net/whitebrow09/292">블로그에서 수식 표현하기</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013.07.27]]></title>
    <link href="http://SanghyukChun.github.io/8/"/>
    <updated>2013-07-28T02:36:00+09:00</updated>
    <id>http://SanghyukChun.github.io/8</id>
    <content type="html"><![CDATA[<p>저번 주에는 <a href="http://sanghyukchun.github.io/aboutMe/">AboutMe</a>에 매진하고 이번 주말에는 내내 블로그를 작업하는 데에 몰두한 것 같다. -프로그래밍은 재미있는 것이다.- 라는 말은 어디까지나 내가 감당할 수 있고 내가 어떻게 할 수 있을지 가늠할 수 있을 때 어울리는 말이 아닐까. 앞으로 내가 나아갈 방향에서 그렇지 않은 프로그래밍이 참 많을텐데 내가 계속 프로그래밍을 하는 것이 맞을까라는 생각이 든다.</p>
<p>Octopress로 블로그를 만든 것을 살짝 후회하고 있다. 편하게 고치려고 가져온건데 오히려 바닥부터 뜯어고쳐야하는게 많다보니 차라리 처음부터 지킬로 작업하는 것 보다 느린 것 같다. 하지만 일단 커스터마이징만 끝나면 deploy, preview 심지어 new post까지 전부 스크립트로 걸어놨으니 오히려 더 빠르게 진행될 수 있겠지</p>
<p>머신러닝 공부 속도는 더디지만 (오늘은 7강까지 밖에 못들었다.) 그래도 얼른 끝내야 내 프로젝트를 진행하고 neural network 강의 등으로 넘어가서 내 자신에 대한 발전이 있을 텐데 자꾸 더디다. 아직까지는 전부 아는 내용이라 사실 정말 빠르게 다 보고 슥슥 넘겨도 괜찮은 정도인데 그 잠깐을 집중하는 것도 못하고 있어서 큰일이다. 하지만 머신러닝 강의가 더딘만큼 블로그와 About Me의 개발 속도는 어마어마한 것을 보면 확실히 이 세상에 모든 것은 trade-off관계인가 보다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress에 facebook comments 추가하기]]></title>
    <link href="http://SanghyukChun.github.io/7/"/>
    <updated>2013-07-28T01:38:00+09:00</updated>
    <id>http://SanghyukChun.github.io/7</id>
    <content type="html"><![CDATA[<p>원래는 바로 레이아웃 뜯어고친 얘기를 적을 생각이었지만 페북 코멘트로 삽질을 하고나니 이것 부터 기록하는 편이 더 나을 것 같다.. 일단 당연히 Octopress는 정적 html 페이지이니 Octopress자체가 comment를 관리하는 것은 불가능하다. 때문에 iframe으로 만들어진 social plugin이 필요한 것이고.. 사실 Disqus를 사용하면 세팅도 할 필요없이 간단하게 처리가 가능하다. 하지만 Disqus는 여러 단점이 존재하고, 무엇보다 내가 쓸 줄 모른다 -_-; 그리고 한국에서 쓰는 걸 본 적이 없음. 차라리 페북이나 트위터 댓글을 만드는 편이 훨씬 나을 것 같아서 개발 경험이 있는 페이스북 댓글로 가기로 했다.</p>
<p>페이스북 댓글을 만들기 위해서는 먼저 app id가 필요하다. 자신의 <a href="https://developers.facebook.com/apps">App관리 페이지</a>에서 앱을 추가하고 app id만 받아오면 된다. 이 id가 있어야 페이스북 자바스크립트 API를 사용 가능하기 때문에 꼭 만들어줘야한다. (즉, 앱 이름을 제외한 나머지 옵션은 건드릴 필요가 없다)</p>
<p>원래 <a href="https://developers.facebook.com/docs/reference/plugins/comments/">facebook document</a>에서 <a class="tip" title="facebook comment에서 설정할 수 있는 값은 크기와 light, dark뿐">자동 생성한 코드</a>를 이용했기 때문에 id를 전부 하드코딩했었는데 <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">좋은 포스트</a>를 발견해서 새로운 좋은 방법을 알아냈다. 일단 받아온 앱 id를 _config.yml에 추가하자.</p>
<p><code>
facebook_app_id = 12341234
</code></p>
<p><a href="https://developers.facebook.com/docs/reference/plugins/comments/">위에서 링크한 document</a>를 보면 알 수 있겠지만, body에서 script를 사용하여 API를 사용할 수 있도록 만들어주는 코드가 필요하고, 실제 코멘트를 추가할 위치에 fb_comments라는 div를 생성해야한다. 이게 사실 짱짱 귀찮은데 이유는 Comment를 추가해야하는 곳이 page랑 post 두개이기 때문 -_-; 거기다가 나는 이상하게 조건문이 잘 안먹어서 열이 뻗쳐서 그냥 if문도 날려버렸다. 내 코딩의 문제겠지만 오랫만에 레일즈 스타일로 html고치려니깐 뭔가 답답해서..</p>
<p>아무튼 그렇게 하고나서 <code>source/_include/post/facebook_comment.html</code>이라는 녀석을 만들어서 아래의 코드를 추가해주자</p>
<p><code>
&lt;div class="fb-comments" data-href="http://SanghyukChun.github.ioblog/categories/octopress/atom.xml" data-width="470" data-num-posts="10"&gt;&lt;/div&gt;
</code></p>
<p>옵션은 본인이 원하는 대로 고쳐도 된다. 이제 <code>source/_layout/page.html</code>과 <code>source/_layout/post.html</code>을 수정하자</p>
<p>```

```</p>
<p>자 이걸로 끝이다. <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">아까 링크했던 글</a>에서는 head에 meta를 추가해주는데 해도 좋고, 없어도 잘 돌아는간다.</p>
<h6>생길 수 있는 문제들</h6>
<ul>
	<li>나처럼 옵션 잘못 걸어서 아예 Comment section자체가 안생김</li>
	<li>data-href에 http:// 없는 상태로 테스트함 (위와 같이해서 preview 때리면 잘 되야한다)</li>
	<li>app id나 등등에서 오타가 있음 (그런데 은근 고칠게 많아서 의외로 찾기 힘들다)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 자잘한 세팅 변경 및 post용 script 만들기]]></title>
    <link href="http://SanghyukChun.github.io/6/"/>
    <updated>2013-07-27T20:13:00+09:00</updated>
    <id>http://SanghyukChun.github.io/6</id>
    <content type="html"><![CDATA[<p>일단 자잘한 세팅으로 첫 번째 favicon. favicon이라는 녀석은 사이트에 즐겨찾기를 추가했을 때 옆에 작게 로고처럼 표시되는 녀석인데, default값이 octopress랑 같아서 도저히 작업하면서 신경쓰여서 바꿔버렸다. 이건 정말 간단하다. source/ directory바로 밑에 있는 favicon.png만 다른 파일로 바꿔주고 generate하고 deploy하면 끝</p>
<p>두번 째로 Permalink. 쉽게 생각하면 포스트의 고유 주소값. 내가 티스토리, 워드프레스로 넘어가면서 가장 불만이었던 점이 이 고유 주소값의 default가 포스트 이름이라는 점. 근데 나는 원래 포스트 이름이 꽤 긴편이고 거기다가 주소에 날짜가 들어가면 정말 우아하지 않다고 생각해서 가장 미니멀리즘하게 포스트 순서대로 하는 것을 좋아한다. 그런데 octopress도 기본 값이 년/월/일/제목 이다.. -_- 그래서 간단하게 바꿔줬는데, _config.yml에 있는 permalink를 /:year/:month/:day/:title에서 /:title로 바꿔주고 markdown 파일 이름을 2013-07-25-1.markdown 이런 식으로 바꿔주면 된다. 어차피 앞에 주소는 rake new_post할 때 해주는거니깐 딱히 고민할 이유는 없다.</p>
<p>근데 이렇게 하면 매번 생성할 때 마다 마지막 파일 이름이 뭐였는지 일일이 확인해야해서 굉장히 상당히 엄청 귀찮다. 그래서 아래와 같은 스크립트를 만들었음</p>
<p><code>
#!/bin/bash
num=$(ls -l | grep markdown | wc -l)
bundle exec rake new_post["$((num+1))"]
</code></p>
<p>그냥 post.sh라고 이름 붙이고 /source/_post directory바로 밑에 두고 ./post.sh만 돌리면 알아서 순서대로 만들어 준다 굳굳</p>
]]></content>
  </entry>
  
</feed>
